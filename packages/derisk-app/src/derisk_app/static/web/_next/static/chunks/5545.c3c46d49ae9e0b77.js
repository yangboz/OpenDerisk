"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[5545],{55545:function(e,E,t){t.r(E),t.d(E,{setup:function(){return q}});var n=t(56057),a=t(84223),T=t(3280);let r=[{name:"ABS",params:[{name:"numeric_expression"}],desc:"返回指定数值表达式的绝对值（正值）的数学函数。ABS 将负值更改为正值，对零或正值没有影响。"},{name:"ACOS",params:[{name:"numeric_expression"}],desc:"返回以弧度表示的角，其余弦为指定的 NUMBER 表达式，也称为反余弦。"},{name:"ASIN",params:[],desc:"",isNotSupport:!0},{name:"ATAN",params:[],desc:"",isNotSupport:!0},{name:"ATAN2",params:[],desc:"",isNotSupport:!0},{name:"BITAND",params:[{name:"nExpression1"},{name:"nExpression2"}],desc:"运算符按位进行“与”操作。输入和输出类型均为 NUMBER 数据类型。"},{name:"CEIL",params:[{name:"numeric_expression"}],desc:"返回值大于等于数值 numeric_expression 的最小整数。"},{name:"COS",params:[],desc:"",isNotSupport:!0},{name:"COSH",params:[],desc:"",isNotSupport:!0},{name:"EXP",params:[{name:"numeric_expression"}],desc:"返回 e 的 numeric_expression 次幂（e 为数学常量，e = 2.71828183... ）。"},{name:"FLOOR",params:[{name:"numeric_expression"}],desc:"返回小于等于数值 numeric_expression 的最大整数。"},{name:"LN",params:[{name:"numeric_expression"}],desc:"返回以 e 为底的 numeric_expression 的对数（e 为数学常量 e = 2.71828183...）。"},{name:"LOG",params:[{name:"x"},{name:"y"}],desc:"返回以 x 为底的 y 的对数。"},{name:"MOD",params:[{name:"x"},{name:"y"}],desc:"返回 x 除以 y 的余数。"},{name:"POWER",params:[{name:"x"},{name:"y"}],desc:"返回 x 的 y 次幂。"},{name:"REMAINDER",params:[{name:"x"},{name:"y"}],desc:"返回 x 除以 y 的余数。"},{name:"ROUND",params:[{name:"numeric"},{name:"decimal"}],desc:"返回参数 numeric 四舍五入后的值。"},{name:"SIGN",params:[{name:"n"}],desc:"返回数字 n 的符号，大于 0 返回 1，小于 0 返回 -1 ，等于 0 返回 0。"},{name:"SIN",params:[],desc:"",isNotSupport:!0},{name:"SINH",params:[],desc:"",isNotSupport:!0},{name:"SQRT",params:[{name:"n"}],desc:"返回 n 的平方根。"},{name:"TAN",params:[],desc:"",isNotSupport:!0},{name:"TANH",params:[],desc:"",isNotSupport:!0},{name:"TRUNC",params:[{name:"numberic"},{name:"precision"}],desc:"返回 numberic 按精度 precision 截取后的值。"},{name:"WIDTH_BUCKET",params:[],desc:"",isNotSupport:!0},{name:"CHR",params:[{name:"n"}],desc:"将 n 转换为等价的一个或多个字符返回，且返回值与当前系统的字符集相关。"},{name:"CONCAT",params:[{name:"c1"},{name:"c2"}],desc:"连接两个字符串。"},{name:"INITCAP ",params:[{name:"c1"}],desc:"返回字符串并将字符串中每个单词的首字母大写，其他字母小写。"},{name:"LOWER",params:[{name:"c1"}],desc:"将字符串全部转为小写。"},{name:"LPAD ",params:[{name:"c1"},{name:"n"},{name:"c2"}],desc:"在字符串 c1 的左边用字符串 c2 填充，直到长度为 n 时为止。"},{name:"LTRIM",params:[{name:"c1"},{name:"c2"}],desc:"删除左边出现的字符串。"},{name:"REGEXP_REPLACE",params:[{name:"source_char"},{name:"pattern"},{name:"replace_string"},{name:"position"},{name:"occurrence"},{name:"match_param"}],desc:"正则表达式替换。"},{name:"REGEXP_SUBSTR",params:[],desc:"",isNotSupport:!0},{name:"REPLACE",params:[{name:"c1"},{name:"c2"},{name:"c3"}],desc:"将字符表达式值中，部分相同字符串，替换成新的字符串。"},{name:"RPAD",params:[{name:"c1"},{name:"n"},{name:"c2"}],desc:"在字符串 c1 的右边用字符串 c2 填充，直到长度为 n 时为止。"},{name:"RTRIM",params:[{name:"c1"},{name:"c2"}],desc:"删除右边出现的字符串，此函数对于格式化查询的输出非常有用。"},{name:"SUBSTR ",params:[{name:"c1"},{name:"n1"},{name:"n2"}],desc:"截取子字符串。其中多字节符（汉字、全角符等）按 1 个字符计算。"},{name:"TRANSLATE",params:[{name:"c1"},{name:"c2"},{name:"c3"}],desc:"将字符表达式值中，指定字符替换为新字符。多字节符（汉字、全角符等），按 1 个字符计算。"},{name:"TRIM ",body:"TRIM(${1:trim_character} FROM ${2:trim_source})",desc:"删除一个字符串的开头或结尾（或两者）的字符。"},{name:"UPPER",params:[{name:"c1"}],desc:"将字符串全部转为大写。"},{name:"ASCII",params:[{name:"x"}],desc:"返回字符表达式最左端字符的 ASCII 码值。"},{name:"INSTR",params:[{name:"c1"},{name:"c2"},{name:"i"},{name:"j"}],desc:"在一个字符串中搜索指定的字符，返回发现指定的字符的位置。"},{name:"LENGTH",params:[{name:"c1"}],desc:"返回字符串的长度。"},{name:"REGEXP_COUNT",params:[],desc:"",isNotSupport:!0},{name:"REGEXP_INSTR",params:[],desc:"",isNotSupport:!0},{name:"ADD_MONTHS",params:[{name:"date"},{name:"n"}],desc:"返回在日期 date 基础上 n 个月后的日期值，如果 n 的值为负数则返回日期 date 基础上 n 个月前的日期值（date 减去 n 个月）。"},{name:"CURRENT_DATE",desc:"当前会话时区中的当前日期。"},{name:"CURRENT_TIMESTAMP",params:[{name:"precision"}],desc:"返回 TIMESTAMP WITH TIME ZONE 数据类型的当前会话时区中的当前日期，返回值中包含当前的时区信息。"},{name:"DBTIMEZONE",desc:"返回当前数据库实例的时区，在 OceanBase 中数据库时区恒为+00:00，且不支持修改。"},{name:"EXTRACT",body:"EXTRACT(${1:fields} FROM ${2:datetime})",desc:"从指定的时间字段或表达式中抽取年、月、日、时、分、秒等元素。"},{name:"FROM_TZ",params:[{name:"timestamp_value"},{name:"timestamp_value"}],desc:"将一个 TIMSTAMP 数据类型的值和时区信息拼成一个 TIMESTAMP WITH TIME ZONE 数据类型的时间值。"},{name:"LAST_DAY",params:[{name:"date"}],desc:"返回日期 date 所在月份的最后一天的日期。"},{name:"LOCALTIMESTAMP",params:[{name:"timestamp_precision"}],desc:"返回当前会话时区中的当前日期，返回 TIMESTAMP 数据类型的值。"},{name:"MONTHS_BETWEEN ",params:[{name:"date1"},{name:"date2"}],desc:"返回返回参数 date1 到 date2 之间的月数。"},{name:"NEW_TIME",params:[],desc:"",isNotSupport:!0},{name:"NEXT_DAY",params:[{name:"d1"},{name:"c1"}],desc:"返回日期 d1 的下一周中 c1（星期值）所在的日期值。"},{name:"NUMTODSINTERVAL",params:[{name:"n"},{name:"interval_unit"}],desc:"把参数 n 转为以参数 interval_unit 为单位的 INTERVAL DAY TO SECOND 数据类型的值。"},{name:"NUMTOYMINTERVAL",params:[{name:"n"},{name:"interval_unit"}],desc:"把参数 n 转为以 interval_unit 为单位的 INTERVAL YEAR TO MONTH 数据类型的值。"},{name:"ROUND",params:[{name:"date"},{name:"fmt"}],desc:"返回以参数 fmt 为单位距离的离指定日期 date 最近的日期时间值。"},{name:"SESSIONTIMEZONE",desc:"当前会话时区。"},{name:"SYS_EXTRACT_UTC",params:[{name:"datetime_with_timezone"}],desc:"返回与指定时间相对应的标准 UTC 时间。"},{name:"SYSDATE",desc:"当前日期。"},{name:"SYSTIMESTAMP",desc:"系统当前日期，返回值的秒的小数位包含 6 位精度，且包含当前时区信息。"},{name:"TO_CHAR",params:[{name:"datetime"},{name:"fmt"},{name:"nlsparam"}],desc:"将 DATE、TIMESTAMP、TIMESTAMP WITH TIME ZONE、TIMESTAMP WITH LOCAL TIME ZONE、INTERVAL DAY TO SECOND 和 INTERVAL YEAR TO MONTH 等数据类型的值按照参数 fmt 指定的格式转换为 VARCHAR2 数据类型的值。"},{name:"TO_DSINTERVAL",params:[{name:"n"}],desc:"将一个 CHAR、VARCHAR2、NCHAR 或 NVARCHAR2 数据类型的字符串转换为一个 INTERVAL DAY TO SECOND 数据类型的值。"},{name:"TO_TIMESTAMP",params:[{name:"char"},{name:"fmt"},{name:"nlsparam"}],desc:"将字符串转换为 TIMESTAMP 数据类型。"},{name:"TO_TIMESTAMP_TZ ",params:[{name:"char"},{name:"fmt"},{name:"nlsparam"}],desc:"将字符串转换为 TIMESTAMP WITH TIME ZONE 数据类型，包含时区信息。"},{name:"TO_YMINTERVAL",params:[{name:"n"}],desc:"将一个 CHAR、VARCHAR2、NCHAR 或 NVARCHAR2 数据类型的字符串转换为一个 INTERVAL YEAR TO MONTH 数据类型的值，该函数可以用来对一个日期时间值进行加减计算。"},{name:"TRUNC",params:[{name:"date"},{name:"fmt"}],desc:"返回以参数 fmt 为单位距离的离指定日期 date 最近的日期时间值，并且返回的日期值在 date 之前。"},{name:"TZ_OFFSET",params:[{name:"n"}],desc:"返回时区 n 的时区偏移量。时区偏移量是指与格林尼治标准时间 GMT 的差（小时和分钟）。"},{name:"GREATEST",params:[{name:"expr"}],desc:"返回一个或多个表达式列表中的最大值。"},{name:"LEAST",params:[{name:"expr"}],desc:"返回一个或多个表达式列表中的最小值。"},{name:"CAST",body:"CAST(${1:expr} AS ${2:type_name})",desc:"将源数据类型的表达式显式转换为另一种数据类型。"},{name:"ASCIISTR",params:[],desc:"",isNotSupport:!0},{name:"BIN_TO_NUM",params:[],desc:"",isNotSupport:!0},{name:"CHARTOROWID",params:[],desc:"",isNotSupport:!0},{name:"HEXTORAW",params:[{name:"char"}],desc:"将 CHAR、VARCHAR2、NCHAR 或 NVARCHAR2 数据类型中包含十六进制数字的字符转换为 RAW 数据类型。"},{name:"RAWTOHEX",params:[{name:"raw"}],desc:"将二进制数转换为一个相应的十六进制表示的字符串。"},{name:"TO_BINARY_DOUBLE ",params:[{name:"expr"},{name:"fmt"},{name:"nlsparam"}],desc:"返回一个双精度的 64 位浮点数。"},{name:"TO_BINARY_FLOAT",params:[{name:"expr"},{name:"fmt"},{name:"nlsparam"}],desc:"返回一个单精度的 32 位浮点数。"},{name:"TO_CHAR",params:[{name:"character"}],desc:"将 NCHAR、NVARCHAR2 或 CLOB 数据转换为数据库字符集。"},{name:"TO_DATE",params:[{name:"char"},{name:"fmt"},{name:"nlsparam"}],desc:"将 CHAR、VARCHAR、NCHAR 或 NVARCHAR2 数据类型的字符转换为日期数据类型的值。"},{name:"TO_DSINTERVAL",params:[{name:"n"}],desc:"将一个 CHAR、VARCHAR2、NCHAR 或 NVARCHAR2 数据类型的字符串转换为一个 INTERVAL DAY TO SECOND 数据类型的值，该函数可以用来对一个日期时间值进行加减计算。"},{name:"TO_NUMBER",params:[{name:"char"},{name:"fmt"},{name:"nlsparam"}],desc:"将 expr 转换为数值数据类型的值。expr 可以是 CHAR、VARCHAR2、NCHAR、NVARCHAR2、BINARY_FLOAT 或 BINARY_DOUBLE 数据类型的数值。"},{name:"TO_TIMESTAMP",params:[{name:"char"},{name:"fmt"},{name:"nlsparam"}],desc:"将字符串转换为 TIMESTAMP 数据类型。"},{name:"TO_TIMESTAMP_TZ",params:[{name:"char"},{name:"fmt"},{name:"nlsparam"}],desc:"将字符串转换为 TIMESTAMP WITH TIME ZONE 数据类型，包含时区信息。"},{name:"TO_YMINTERVAL",params:[{name:"n"}],desc:"将一个 CHAR、VARCHAR2、NCHAR 或 NVARCHAR2 数据类型的字符串转换为一个 INTERVAL YEAR TO MONTH 数据类型的值，该函数可以用来对一个日期时间值进行加减计算。"},{name:"DECODE",params:[{name:"condition"},{name:"search"},{name:"result"}],desc:"依次用参数 search 与 condition 做比较，直至 condition 与 search 的值相等，则返回对应 search 后跟随的参数 result 的值。如果没有 search 与 condition 相等，则返回参数 default 的值。"},{name:"ORA_HASH",params:[{name:"expr"},{name:"max_bucket"},{name:"seed_value"}],desc:"获取对应表达式的 HASH 值。"},{name:"VSIZE",params:[{name:"x"}],desc:"返回 x 的字节大小数。"},{name:"COALESCE",params:[{name:"expr1"},{name:"expr1"}],desc:"返回参数列表中第一个非空表达式，必须指定最少两个参数。"},{name:"LNNVL",params:[{name:"condition"}],desc:"判断条件中的一个或者两个操作数是否为 NULL"},{name:"NULLIF",params:[],desc:"",isNotSupport:!0},{name:"NVL",params:[{name:"expr1"},{name:"expr2"}],desc:"返回一个非 NULL 值"},{name:"NVL2 ",params:[{name:"expr1"},{name:"expr2"},{name:"expr3"}],desc:"根据表达式是否为空，返回不同的值。"}].concat([{name:"AVG",params:[{name:"expr"}],desc:"返回数值列的平均值。"},{name:"COUNT",params:[{name:"expr"}],desc:"查询 expr 的行数。"},{name:"SUM",params:[{name:"expr"}],desc:"返回参数中指定列的和。"},{name:"GROUPING",params:[],desc:"",isNotSupport:!0},{name:"MAX",params:[{name:"expr"}],desc:"返回参数中指定的列中的最大值。"},{name:"MIN",params:[{name:"expr"}],desc:"返回参数中指定列的最小值。"},{name:"LISTAGG",body:"LISTAGG (${1:measure_expr}) WITHIN GROUP (ORDER BY ${2: expr}) OVER ${3:query_partition_clause}",desc:"用于列转行，LISTAGG 对 ORDER BY 子句中指定的每个组内的数据进行排序，然后合并度量列的值。"},{name:"ROLLUP",params:[{name:"col1"}],desc:"在数据统计和报表生成过程中，它可以为每个分组返回一个小计，同时为所有分组返回总计。"},{name:"STDDEV",params:[{name:"expr"}],desc:"计算总体标准差。"},{name:"STDDEV_POP",params:[{name:"expr"}],desc:"计算总体标准差。"},{name:"STDDEV_SAMP",params:[{name:"expr"}],desc:"计算样本标准差。"},{name:"VARIANCE",params:[{name:"expr"}],desc:"返回参数指定列的方差。"},{name:"APPROX_COUNT_DISTINCT ",params:[{name:"expr"}],desc:"对某一列去重后的行数进行计算，结果只能返回一个值，且该值是近似值，该函数可以进一步用于计算被引用的列的选择性。"}]).concat([]);var l=t(80345),A=t(18038);let i=new A.q(window.obMonaco.getWorkerUrl("oboracle")),R=l.Ud(i.getWorker());var N=t(11184),S=function(e,E,t,n){return new(t||(t=Promise))(function(a,T){function r(e){try{A(n.next(e))}catch(e){T(e)}}function l(e){try{A(n.throw(e))}catch(e){T(e)}}function A(e){var E;e.done?a(e.value):((E=e.value)instanceof t?E:new t(function(e){e(E)})).then(r,l)}A((n=n.apply(e,E||[])).next())})},s=class{constructor(e){this.triggerCharacters=["."],this.plugin=null,this.plugin=e}getModelOptions(e){var E;return null===(E=this.plugin)||void 0===E?void 0:E.modelOptionsMap.get(e)}provideCompletionItems(e,E,t,n){let{offset:a,value:T,delimiter:r,range:l,triggerCharacter:A}=(0,N.y)(e,E,t,this.plugin);return this.getCompleteWordFromOffset(a,T,r,l,e,A)}getColumnList(e,E,t,n=!0){var a,r;return S(this,void 0,void 0,function*(){let l=this.getModelOptions(e.id),A=[],i=yield null===(a=null==l?void 0:l.getTableColumns)||void 0===a?void 0:a.call(l,E.tableName,E.schemaName);return(null==i?void 0:i.length)||E.schemaName||(i=yield null===(r=null==l?void 0:l.getTableColumns)||void 0===r?void 0:r.call(l,E.tableName,"sys")),i&&i.forEach(e=>{A.push((0,T.yD)(e.columnName,E.tableName,E.schemaName,t,n))}),A})}getSchemaList(e,E){var t;return S(this,void 0,void 0,function*(){let n=this.getModelOptions(e.id),a=[],r=yield null===(t=null==n?void 0:n.getSchemaList)||void 0===t?void 0:t.call(n);return r&&r.forEach(e=>{a.push((0,T.lW)(e,E))}),a})}getTableList(e,E,t){var n;return S(this,void 0,void 0,function*(){let a=this.getModelOptions(e.id),r=[],l=yield null===(n=null==a?void 0:a.getTableList)||void 0===n?void 0:n.call(a,E);return l&&l.forEach(e=>{r.push((0,T.Pf)(e,E,!1,t))}),r})}getFunctions(e,E){var t;return S(this,void 0,void 0,function*(){let n=this.getModelOptions(e.id),a=yield null===(t=null==n?void 0:n.getFunctions)||void 0===t?void 0:t.call(n);return(a||[]).concat(r).map(e=>(0,T.Ht)(e,E))})}getSnippets(e,E){var t;return S(this,void 0,void 0,function*(){let n=this.getModelOptions(e.id),a=yield null===(t=null==n?void 0:n.getSnippets)||void 0===t?void 0:t.call(n);return(a||[]).map(e=>(0,T.k8)(e,E))})}getCompleteWordFromOffset(e,E,t,n,a,r){var l;return S(this,void 0,void 0,function*(){let r=R.parser,A=yield r.getAutoCompletion(E,t,e);if(A){let e=this.getModelOptions(a.id),E=[],t=!0;for(let r of A)if("string"!=typeof r&&(t=!1),"string"==typeof r)E.push((0,T.Lx)(r,n));else if("allTables"===r.type)E=E.concat((yield this.getTableList(a,r.schema,n))),r.schema||r.disableSys||(E=E.concat((yield this.getTableList(a,"sys",n))));else if("tableColumns"===r.type)E=E.concat((yield this.getColumnList(a,r,n,!1!==r.autoNext)));else if("withTable"===r.type)E.push((0,T.Pf)(r.tableName,"CTE",!1,n));else if("allSchemas"===r.type)E=E.concat((yield this.getSchemaList(a,n)));else if("objectAccess"===r.type){let t=r.objectName,T=yield null===(l=null==e?void 0:e.getSchemaList)||void 0===l?void 0:l.call(e),A=null==T?void 0:T.find(e=>e===t);if(A){E=E.concat((yield this.getTableList(a,r.objectName,n)));continue}let i=t.split("."),R=i.length>1?i[1]:i[0],N=i.length>1?i[0]:void 0,S=yield this.getColumnList(a,{tableName:R,schemaName:N},n);(null==S?void 0:S.length)&&(E=E.concat(S))}else"fromTable"===r.type?E.push((0,T.Pf)(r.tableName,r.schemaName,!0,n)):"allFunction"===r.type&&(E=E.concat((yield this.getFunctions(a,n))));return t&&(E=E.concat((yield this.getSnippets(a,n)))),{suggestions:E,incomplete:!1}}return{suggestions:[],incomplete:!1}})}};let O=["*","ADMIN","AFTER","ALLOCATE","ANALYZE","ARCHIVE","ARCHIVELOG","AUTHORIZATION","AVG","BACKUP","BECOME","BEFORE","BEGIN_KEY","BLOCK","BODY","CACHE","CANCEL","CASCADE","CHANGE","CHARACTER","CHECKPOINT","CLOSE","COBOL","COMMIT","COMPILE","CONSTRAINT","CONSTRAINTS","CONTENTS","CONTINUE","CONTROLFILE","COUNT","CURSOR","CYCLE","DATABASE","DATAFILE","DBA","DEC","DECLARE","DISABLE","DISMOUNT","DOUBLE","DUMP","EACH","ENABLE","END","ESCAPE","EVENTS","EXCEPT","EXCEPTIONS","EXEC","EXECUTE","EXPLAIN","EXTENT","EXTERNALLY","FETCH","FLUSH","FORCE","FOREIGN","FORTRAN","FOUND","FREELIST","FREELISTS","FUNCTION","GO","GOTO","GROUPS","INCLUDING","INDICATOR","INITRANS","INSTANCE","INT","KEY","LANGUAGE","LAYER","LINK","LISTS","LOGFILE","MANAGE","MANUAL","MAX","MAXDATAFILES","MAXINSTANCES","MAXLOGFILES","MAXLOGHISTORY","MAXLOGMEMBERS","MAXTRANS","MAXVALUE","MIN","MINEXTENTS","MINVALUE","MODULE","MOUNT","NEW","NEXT","NOARCHIVELOG","NOCACHE","NOCYCLE","NOMAXVALUE","NOMINVALUE","NONE","NOORDER","NORESETLOGS","NOSORT","NUMERIC","OFF","OLD","ONLY","OPEN","OPTIMAL","OWN","PACKAGE_KEY","PARALLEL","PCTINCREASE","PCTUSED","PLAN","PLI","PRECISION","PRIMARY","PRIVATE","PROCEDURE","PROFILE","QUOTA","READ","REAL","RECOVER","REFERENCES","REFERENCING","RESETLOGS","RESTRICTED","REUSE","ROLE","ROLES","ROLLBACK","SAVEPOINT","SCHEMA","SCN","SECTION","SEGMENT","SEQUENCE","SHARED","SNAPSHOT","SOME","SORT","SQL","SQLCODE","SQLERROR","SQLSTATE","STATEMENT_ID","STATISTICS","STOP","STORAGE","SUM","SWITCH","SYSTEM","TABLES","TABLESPACE","TEMPORARY","THREAD","TIME","TRACING","TRANSACTION","TRIGGERS","TRUNCATE","UNDER","UNLIMITED","UNTIL","USE","USING","WHEN","WORK","WRITE","ACCOUNT","ACCESSIBLE","ACTION","ACTIVE","ADDDATE","ADMINISTER","AGGREGATE","AGAINST","ALGORITHM","ALWAYS","ANALYSE","APPROX_COUNT_DISTINCT","APPROX_COUNT_DISTINCT_SYNOPSIS","APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE","ASENSITIVE","AT","AUTHORS","AUTO","AUTOEXTEND_SIZE","AVG_ROW_LENGTH","BASE","BASELINE","BASELINE_ID","BASIC","BALANCE","BINARY","BINARY_DOUBLE","BINARY_FLOAT","BINDING","BINLOG","BIT","BLOB","BLOCK_SIZE","BLOCK_INDEX","BLOOM_FILTER","BOOL","BOOLEAN","BOOTSTRAP","BOTH","BTREE","BULK","BULK_EXCEPTIONS","BULK_ROWCOUNT","BYTE","BREADTH","CALL","CASCADED","CAST","CATALOG_NAME","CHAIN","CHANGED","CHARSET","CHECKSUM","CIPHER","CLASS_ORIGIN","CLEAN","CLEAR","CLIENT","CLOB","CLOG","CLUSTER_ID","CLUSTER_NAME","COALESCE","CODE","COLLATE","COLLATION","COLLECT","COLUMN_FORMAT","COLUMN_NAME","COLUMN_OUTER_JOIN_SYMBOL","COLUMN_STAT","COLUMNS","COMMITTED","COMPACT","COMPLETION","COMPRESSED","COMPRESSION","COMPUTE","CONCURRENT","CONNECTION","CONNECT_BY_ISCYCLE","CONNECT_BY_ISLEAF","CONSISTENT","CONSISTENT_MODE","CONSTRAINT_CATALOG","CONSTRAINT_NAME","CONSTRAINT_SCHEMA","CONTAINS","CONTEXT","CONTRIBUTORS","CONVERT","COPY","CORR","COVAR_POP","COVAR_SAMP","CPU","CREATE_TIMESTAMP","CROSS","CUBE","CUME_DIST","CURRENT_USER","CURRENT_SCHEMA","CURRENT_DATE","CURRENT_TIMESTAMP","DATA","DATABASES","DATABASE_ID","DATA_TABLE_ID","DATE_ADD","DATE_SUB","DATETIME","DAY","DAY_HOUR","DAY_MICROSECOND","DAY_MINUTE","DAY_SECOND","DBA_RECYCLEBIN","DBTIMEZONE","DEALLOCATE","DEFAULT_AUTH","DEFINER","DELAY","DELAYED","DELAY_KEY_WRITE","DENSE_RANK","DEPTH","DES_KEY_FILE","DESCRIBE","DESTINATION","DETERMINISTIC","DIAGNOSTICS","DICTIONARY","DIRECTORY","DISCARD","DISK","DISTINCTROW","DIV","DO","DUMPFILE","DUPLICATE","DUPLICATE_SCOPE","DYNAMIC","DEFAULT_TABLEGROUP","E","EFFECTIVE","ELSEIF","ENCLOSED","ENCRYPTION","ENDS","ENGINE_","ENGINES","ENUM","ERROR_CODE","ERROR_P","ERROR_INDEX","ERRORS","ESCAPED","ESTIMATE","EVENT","EVERY","EXCHANGE","EXCLUDE","EXEMPT","EXIT","EXPANSION","EXPIRE","EXPIRE_INFO","EXPORT","EXTENDED","EXTENDED_NOADDR","EXTENT_SIZE","EXTRACT","FAILED_LOGIN_ATTEMPTS","FAST","FAULTS","FIELDS","FILE_ID","FILEX","FINAL_COUNT","FIRST","FIRST_VALUE","FIXED","FLASHBACK","FLOAT4","FLOAT8","FOLLOWER","FOLLOWING","FORMAT","FREEZE","FREQUENCY","FROZEN","FULL","G","GENERAL","GENERATED","GEOMETRY","GEOMETRYCOLLECTION","GET","GET_FORMAT","GLOBAL","GLOBAL_ALIAS","GRANTS","GROUPING","GTS","HANDLER","HASH","HELP","HIGH","HIGH_PRIORITY","HOUR_MICROSECOND","HOUR_MINUTE","HOUR_SECOND","HOST","HOSTS","HOUR","ID","IDC","IF","IFIGNORE","IGNORE","IGNORE_SERVER_IDS","ILOG","ILOGCACHE","IMPORT","INDEXES","INDEX_TABLE_ID","INCR","INCLUDE","INFO","INFILE","INITIAL_SIZE","INNER","INNER_PARSE","INOUT","INSENSITIVE","INSERT_METHOD","INSTALL","INT1","INT2","INT3","INT4","INT8","INTERVAL","INVOKER","IO","IO_AFTER_GTIDS","IO_BEFORE_GTIDS","IO_THREAD","IPC","ISNULL","ISOLATION","ISSUER","IS_TENANT_SYS_POOL","ITERATE","JOB","JOIN","JSON","K","KEY_BLOCK_SIZE","KEYS","KEYSTORE","KEY_VERSION","KILL","KEEP","KVCACHE","LAG","LAST","LAST_VALUE","LEAD","LEADER","LEADING","LEAVE","LEAVES","LEFT","LESS","LIMIT","LINEAR","LINES","LINESTRING","LIST","LISTAGG","LNNVL","LOAD","LOCAL","LOCALITY","LOCALTIMESTAMP","LOCK_","LOCKED","LOCKS","LOGONLY_REPLICA_NUM","LOGS","LONGBLOB","LONGTEXT","LOOP","LOW","LOW_PRIORITY","ISOPEN","ISOLATION_LEVEL","M","MAJOR","MANAGEMENT","MASTER","MASTER_AUTO_POSITION","MASTER_BIND","MASTER_CONNECT_RETRY","MASTER_DELAY","MASTER_HEARTBEAT_PERIOD","MASTER_HOST","MASTER_LOG_FILE","MASTER_LOG_POS","MASTER_PASSWORD","MASTER_PORT","MASTER_RETRY_COUNT","MASTER_SERVER_ID","MASTER_SSL","MASTER_SSL_CA","MASTER_SSL_CAPATH","MASTER_SSL_CERT","MASTER_SSL_CIPHER","MASTER_SSL_CRL","MASTER_SSL_CRLPATH","MASTER_SSL_KEY","MASTER_SSL_VERIFY_SERVER_CERT","MASTER_USER","MATCH","MATCHED","MAX_CONNECTIONS_PER_HOUR","MAX_CPU","MAX_DISK_SIZE","MAX_IOPS","MAX_MEMORY","MAX_QUERIES_PER_HOUR","MAX_ROWS","MAX_SESSION_NUM","MAX_SIZE","MAX_UPDATES_PER_HOUR","MAX_USED_PART_ID","MAX_USER_CONNECTIONS","MEDIUM","MEDIUMBLOB","MEDIUMINT","MEDIUMTEXT","MEMORY","MEMTABLE","MERGE","MESSAGE_TEXT","META","MICROSECOND","MIDDLEINT","MIGRATE","MIGRATION","MIN_CPU","MIN_IOPS","MIN_MEMORY","MINOR","MIN_ROWS","MINUTE","MINUTE_MICROSECOND","MINUTE_SECOND","MOD","MODIFIES","MONTH","MOVE","MOVEMENT","MULTILINESTRING","MULTIPOINT","MULTIPOLYGON","MUTEX","MYSQL_ERRNO","NAME","NAMES","NATIONAL","NATURAL","NCHAR","NDB","NDBCLUSTER","NO","NODEGROUP","NOLOGGING","NOW","NO_WAIT","NO_WRITE_TO_BINLOG","NULLS","NTILE","NTH_VALUE","NVARCHAR","NVARCHAR2","OBJECT","OCCUR","OFFSET","OLD_PASSWORD","OLD_KEY","OLTP","OVER","ONE","ONE_SHOT","OPTIONS","OPTIMIZE","OPTIONALLY","ORA_ROWSCN","ORIG_DEFAULT","OUT","OUTER","OUTFILE","OUTLINE","OWNER","P","PACK_KEYS","PAGE","PARAMETERS","PARAM_ASSIGN_OPERATOR","PARSER","PARTIAL","PARTITION","PARTITION_ID","PARTITIONING","PARTITIONS","PERCENT_RANK","PASSWORD","PASSWORD_LOCK_TIME","PASSWORD_VERIFY_FUNCTION","PAUSE","PERCENTAGE","PHASE","PLANREGRESS","PLUGIN","PLUGIN_DIR","PLUGINS","PIVOT","POINT","POLICY","POLYGON","POOL","PORT","POSITION","PRECEDING","PREPARE","PRESERVE","PREV","PRIMARY_ZONE","PRIVILEGE","PROCESS","PROCESSLIST","PROFILES","PROGRESSIVE_MERGE_NUM","PROXY","PURGE","QUARTER","QUERY","QUICK","RANK","RANGE","RATIO_TO_REPORT","READ_WRITE","READS","READ_ONLY","REBUILD","RECURSIVE","RECYCLE","RECYCLEBIN","REDACTION","ROW_NUMBER","REDO_BUFFER_SIZE","REDOFILE","REDUNDANT","REFRESH","REGEXP_LIKE","REGION","REGR_SLOPE","REGR_INTERCEPT","REGR_COUNT","REGR_R2","REGR_AVGX","REGR_AVGY","REGR_SXX","REGR_SYY","REGR_SXY","RELAY","RELAYLOG","RELAY_LOG_FILE","RELAY_LOG_POS","RELAY_THREAD","RELEASE","RELOAD","REMOVE","REORGANIZE","REPAIR","REPEAT","REPEATABLE","REPLACE","REPLICA","REPLICA_NUM","REPLICA_TYPE","REPLICATION","REPORT","REQUIRE","RESET","RESIGNAL","RESOURCE_POOL_LIST","RESPECT","RESTART","RESTORE","RESTRICT","RESUME","RETURN","RETURNED_SQLSTATE","RETURNING","RETURNS","REVERSE","REWRITE_MERGE_VERSION","REMOTE_OSS","RLIKE","RIGHT","ROLLUP","ROOT","ROOTTABLE","ROOTSERVICE","ROOTSERVICE_LIST","ROUTINE","ROWCOUNT","ROW_COUNT","ROW_FORMAT","RTREE","RUN","SAMPLE","SCHEDULE","SCHEMAS","SCHEMA_NAME","SCOPE","SEARCH","SECOND","SECOND_MICROSECOND","SECURITY","SEED","SENSITIVE","SEPARATOR","SERIAL","SERIALIZABLE","SERVER","SERVER_IP","SERVER_PORT","SERVER_TYPE","SESSION_ALIAS","SESSION_USER","SESSIONTIMEZONE","SET_MASTER_CLUSTER","SET_SLAVE_CLUSTER","SET_TP","SHRINK","SHOW","SHUTDOWN","SIBLINGS","SIGNAL","SIGNED","SIMPLE","SLAVE","SLOW","SOCKET","SONAME","SOUNDS","SOURCE","SPACE","SPATIAL","SPECIFIC","SPFILE","SPLIT","SQLEXCEPTION","SQLWARNING","SQL_BIG_RESULT","SQL_CALC_FOUND_ROW","SQL_SMALL_RESULT","SQL_AFTER_GTIDS","SQL_AFTER_MTS_GAPS","SQL_BEFORE_GTIDS","SQL_BUFFER_RESULT","SQL_CACHE","SQL_ID","SQL_NO_CACHE","SQL_THREAD","SQL_TSI_DAY","SQL_TSI_HOUR","SQL_TSI_MINUTE","SQL_TSI_MONTH","SQL_TSI_QUARTER","SQL_TSI_SECOND","SQL_TSI_WEEK","SQL_TSI_YEAR","SSL","STRAIGHT_JOIN","STARTING","STARTS","STATS_AUTO_RECALC","STATS_PERSISTENT","STATS_SAMPLE_PAGES","STATUS","STATEMENTS","STDDEV","STDDEV_POP","STDDEV_SAMP","STORAGE_FORMAT_VERSION","STORAGE_FORMAT_WORK_VERSION","STORED","STORING","STRONG","SUBCLASS_ORIGIN","SUBDATE","SUBJECT","SUBPARTITION","SUBPARTITIONS","SUBSTR","SUPER","SUSPEND","SWAPS","SWITCHES","SYSTEM_USER","SYSTIMESTAMP","SYSBACKUP","SYSDBA","SYSKM","SYSOPER","SYS_CONNECT_BY_PATH","T","TABLEGROUP","TABLE_CHECKSUM","TABLE_MODE","TABLEGROUPS","TABLEGROUP_ID","TABLE_ID","TABLE_NAME","TABLET","TABLET_SIZE","TABLET_MAX_SIZE","TASK","TEMPLATE","TEMPTABLE","TENANT","TERMINATED","TEXT","THAN","TIMESTAMP","TIMESTAMPADD","TIMESTAMPDIFF","TIMEZONE_ABBR","TIMEZONE_HOUR","TIMEZONE_MINUTE","TIMEZONE_REGION","TIME_ZONE_INFO","TINYBLOB","TINYTEXT","TP_NAME","TP_NO","TRACE","TRADITIONAL","TRAILING","TRIM","TYPE","TYPES","UNCOMMITTED","UNDEFINED","UNDO","UNDO_BUFFER_SIZE","UNDOFILE","UNICODE","UNKNOWN","UNINSTALL","UNIT","UNIT_NUM","UNLOCK","UNLOCKED","UNUSUAL","UNPIVOT","UPGRADE","UROWID","USAGE","USE_BLOOM_FILTER","USE_FRM","USER_RESOURCES","UTC_DATE","UTC_TIMESTAMP","UNBOUNDED","VALID","VARIABLES","VAR_POP","VAR_SAMP","VERBOSE","MATERIALIZED","WAIT","WARNINGS","WEEK","WEIGHT_STRING","WRAPPER","X509","XA","XML","YEAR","ZONE","ZONE_LIST","ZONE_TYPE","LOCATION","VARIANCE","VARYING","VIRTUAL","VISIBLE","INVISIBLE","RELY","NORELY","NOVALIDATE","WITHIN","WEAK","WHILE","XOR","YEAR_MONTH","ZEROFILL","PERCENT","TIES","THROTTLE","PRIORITY","RT","NETWORK","LOGICAL_READS","QUEUE_TIME","MEMBER","SUBMULTISET","EMPTY","A"].concat(["ACCESS","ADD","ALL","ALTER","AND","ANY","ARRAYLEN","AS","ASC","AUDIT","BEGIN","BEGIN","BETWEEN","BY","CASE","CHAR","CHECK","CLUSTER","COLUMN","COMMENT","COMPRESS","CONNECT","CONNECT_BY_ROOT","CREATE","CURRENT","DATE","DECIMAL","DEFAULT","DELETE","DESC","DISTINCT","DROP","ELSE","ENGINE","ERROR","EXCLUSIVE","EXISTS","FILE","FILE","FLOAT","FOR","FROM","GRANT","GROUP","HAVING","IDENTIFIED","IMMEDIATE","IN","INCREMENT","INDEX","INITIAL","INSERT","INTEGER","INTERSECT","INTO","IS","LEVEL","LIKE","LOCK","LONG","MAXEXTENTS","MINUS","MODE","MODIFY","NOAUDIT","NOCOMPRESS","NOT","NOTFOUND","NO_REWRITE","NUMBER","OF","OFFLINE","ON","ONLINE","OPTION","OR","ORDER","PACKAGE","PCTFREE","PRIOR","PRIVILEGES","PUBLIC","RAW","READ_CONSISTENCY","RENAME","RESOURCE","REVOKE","ROW","ROWID","ROWLABEL","ROWNUM","ROWS","SELECT","SESSION","SET","SHARE","SIZE","SMALLINT","SQLBUF","SQL_CALC_FOUND_ROWS","START","SUCCESSFUL","SYNONYM","DUAL","SYSDATE","TABLE","THEN","TO","TRIGGER","UID","UNION","UNIQUE","UPDATE","USER","VALIDATE","VALUES","VARCHAR2","VARCHAR","VARCHARACTER","VIEW","WHENEVER","WHERE","WITH","NOWAIT","NULLX"]),o=["ABORT","ACCEPT","ACCESS","ACCESSIBLE","ADD","ALL","ALTER","AND","ANY","ARRAY","ARRAYLEN","AS","ASC","ASSERT","ASSIGN","ASSIGN_OPERATOR","AT","AUTHID","AUTHORIZATION","AVG","BASE_TABLE","BEGIN_KEY","BETWEEN","BINARY","BINARY_DOUBLE","BINARY_FLOAT","BINARY_INTEGER","BLOB","BODY","BOOL","BOOLEAN","BULK","BY","BYTE","C","CALL","CASE","CHARACTER","CHARSET","CHAR_BASE","CHECK","CLOB","CLOSE","CLUSTER","CLUSTERS","COLAUTH","COLLATE","COLLECT","COLUMNS","COMMIT","COMPILE","COMPRESS","CONNECT","CONSTANT","CONSTRUCTOR","CONTINUE","COUNT","CRASH","CREATE","CURRENT","CURRENT_USER","CURRVAL","CURSOR","CUSTOMDATUM","DATABASE","DATA_BASE","DATE","DATE_VALUE","DBA","DEBUG","DEBUGOFF","DEBUGON","DECIMAL","DECIMAL_VAL","DECLARE","DEFAULT","DEFINER","DEFINITION","DELAY","DELETE","DELTA","DESC","DETERMINISTIC","DIGITS","DISPOSE","DISTINCT","DO","DROP","Dot","EDITIONABLE","ELSE","ELSIF","END_KEY","END_P","ENTRY","EXCEPTION","EXCEPTIONS","EXCEPTION_INIT","EXECUTE","EXISTS","EXIT","EXTERNAL","FALSE","FETCH","FINAL","FLOAT","FOR","FORALL","FORCE","FORM","FROM","FUNCTION","GENERIC","GOTO","GRANT","GROUP","HASH","HAVING","IDENT","IDENTIFIED","IF","IMMEDIATE","IN","INDEX","INDEXES","INDICATOR","INLINE","INSERT","INSTANTIABLE","INTEGER","INTERFACE","INTERSECT","INTERVAL","INTNUM","INTO","IS","JAVA","LABEL_LEFT","LABEL_RIGHT","LANGUAGE","LEVEL","LIKE","LIMIT","LIMITED","LOCAL","LONG","LOOP","LeftBracket","LeftParen","MAP","MAX","MEMBER","MIN","MINUS","MLSLABEL","MOD","MODE","NAME","NATURAL","NATURALN","NCHAR","NEW","NEXTVAL","NO","NOCOMPRESS","NOCOPY","NONEDITIONABLE","NOT","NULLX","NUMBER","NUMBER_BASE","NUMERIC","NVARCHAR","NVARCHAR2","OBJECT","OF","OID","OLD","ON","OPEN","OPTION","OR","ORADATA","ORDER","OTHERS","OUT","OVERRIDING","PACKAGE_P","PARALLEL_ENABLE","PARAM_ASSIGN_OPERATOR","PARENT","PARTITION","PCTFREE","PIPELINED","PLS_INTEGER","POSITIVE","POSITIVEN","PRAGMA","PRIOR","PRIVATE","PROCEDURE","PUBLIC","RAISE","RANGE","RANGE_OPERATOR","RAW","REAL","RECORD","REF","REFERENCING","RELEASE","RELIES_ON","REMR","RENAME","REPLACE","RESOURCE","RESTIRCT_REFERENCES","RESULT","RESULT_CACHE","RETURN","REUSE","REVERSE","REVOKE","RNDS","RNPS","ROLLBACK","ROWID","ROWLABEL","ROWNUM","ROWTYPE","RUN","RightBracket","RightParen","SAVE","SAVEPOINT","SCHEMA","SELF","SEPARATE","SET","SETTINGS","SIGNTYPE","SIMPLE_DOUBLE","SIMPLE_FLOAT","SIMPLE_INTEGER","SIZE","SMALLINT","SPACE","SPECIFICATION","SQL","SQLCODE","SQLDATA","SQLERRM","SQL_KEYWORD","START","STATEMENT","STATIC","STDDEV","STRING","SUBTYPE","SUM","TABAUTH","TABLE","TABLES","TASK","TERMINATE","THEN","TIME","TIMESTAMP","TO","TRIGGER","TRUE","TRUST","TYPE","UNDER","UNION","UNIQUE","UPDATE","USE","USING","USING_NLS_COMP","VALIDATE","VALUE","VALUES","VARCHAR2","VARIABLE","VARIANCE","VARRAY","VARYING","VIEW","VIEWS","WHEN","WHERE","WHILE","WITH","WNDS","WNPS","WORK","XOR","YEAR","YES","ZONE"],I={comments:{lineComment:"--",blockComment:["/*","*/"]},brackets:[["{","}"],["[","]"],["(",")"]],wordPattern:/[\w#$]+/i,autoClosingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:'"',close:'"'},{open:"'",close:"'"},{open:"`",close:"`"}],surroundingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:'"',close:'"'},{open:"'",close:"'"},{open:"`",close:"`"}]},c={defaultToken:"",tokenPostfix:".sql",ignoreCase:!0,brackets:[{open:"[",close:"]",token:"delimiter.square"},{open:"(",close:")",token:"delimiter.parenthesis"}],keywords:Array.from(new Set(O.concat(o))),operators:[":="],packages:["DBMS_CRYPTO","DBMS_DEBUG","UTL_ENCODE","DBMS_LOB","DBMS_LOCK.SLEEP","DBMS_METADATA.GET_DDL","DBMS_OUTPUT","DBMS_RANDOM","DBMS_SQL","DBMS_XA","ODCIArgDesc.ArgType","ODCIEnv","ODCIFuncInfo.Flags","ODCIIndexAlter parameter alter_option","ODCIIndexInfo","ODCIPredInfo.Flags","ODCIQueryInfo.Flags","ODCIStatsOptions","UTL_I18N","UTL_RAW","SA_SYSDBA","SA_COMPONENTS","SA_LABEL_ADMIN","SA_POLICY_ADMIN","SA_USER_ADMIN.SET_LEVELS","SA_SESSION"],builtinFunctions:r.map(e=>e.name),pseudoColumns:["$ACTION","$IDENTITY","$ROWGUID","$PARTITION"],escapes:/\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,tokenizer:{root:[{include:"@comments"},{include:"@whitespace"},{include:"@pseudoColumns"},{include:"@numbers"},{include:"@strings"},{include:"@backTick"},{include:"@complexIdentifiers"},{include:"@scopes"},{include:"@qstrings"},[/[;,.]/,"delimiter"],[/[()]/,"@brackets"],[/[\w@#$]+/,{cases:{"@keywords":"keyword","@operators":"operator","@packages":"type.identifier","@builtinFunctions":"type.identifier","@default":"identifier"}}],[/[<>=!%&+\-*/|~^]/,"operator"]],qstrings:[[/q\'/,{token:"string",next:"@qstring"}]],qstring:[[/\'.*?\'\'/s,{token:"string",next:"@pop"}],[/<.*?>\'/s,{token:"string",next:"@pop"}],[/\[.*?\]\'/s,{token:"string",next:"@pop"}],[/\{.*?\}\'/s,{token:"string",next:"@pop"}],[/\(.*?\)\'/s,{token:"string",next:"@pop"}],[/!.*?!\'/s,{token:"string",next:"@pop"}],[/#.*?#\'/s,{token:"string",next:"@pop"}],[/".*?"\'/s,{token:"string",next:"@pop"}]],whitespace:[[/\s+/,"white"]],comments:[[/--+.*/,"comment"],[/\/\*/,{token:"comment.quote",next:"@comment"}]],comment:[[/[^*/]+/,"comment"],[/\*\//,{token:"comment.quote",next:"@pop"}],[/./,"comment"]],pseudoColumns:[[/[$][A-Za-z_][\w@#$]*/,{cases:{"@pseudoColumns":"predefined","@default":"identifier"}}]],numbers:[[/0[xX][0-9a-fA-F]*/,"number"],[/[$][+-]*\d*(\.\d*)?/,"number"],[/((\d+(\.\d*)?)|(\.\d+))([eE][\-+]?\d+)?/,"number"]],strings:[[/N'/,{token:"string",next:"@string"}],[/'/,{token:"string",next:"@string"}]],string:[[/[^']+/,"string"],[/@escapes/,"string.escape"],[/''/,"string"],[/'/,{token:"string",next:"@pop"}]],backTick:[[/`/,{token:"identifier.quote",next:"@backTickIdentifiers"}]],backTickIdentifiers:[[/[^`]+/,"string.escape"],[/`/,{token:"identifier.quote",next:"@pop"}]],complexIdentifiers:[[/\[/,{token:"identifier.quote",next:"@bracketedIdentifier"}],[/"/,{token:"identifier.quote",next:"@quotedIdentifier"}]],bracketedIdentifier:[[/[^\]]+/,"identifier"],[/]]/,"identifier"],[/]/,{token:"identifier.quote",next:"@pop"}]],quotedIdentifier:[[/[^"]+/,"identifier"],[/""/,"identifier"],[/"/,{token:"identifier.quote",next:"@pop"}]],scopes:[[/BEGIN\s+(DISTRIBUTED\s+)?TRAN(SACTION)?\b/i,"keyword"],[/BEGIN\s+TRY\b/i,{token:"keyword.try"}],[/END\s+TRY\b/i,{token:"keyword.try"}],[/BEGIN\s+CATCH\b/i,{token:"keyword.catch"}],[/END\s+CATCH\b/i,{token:"keyword.catch"}],[/(BEGIN|CASE)\b/i,{token:"keyword.block"}],[/END\b/i,{token:"keyword.block"}],[/WHEN\b/i,{token:"keyword.choice"}],[/THEN\b/i,{token:"keyword.choice"}]]}};var m=t(46090),L=t(71413),_=t(4037),C=t(93946),d=t(42939),u=t(41052),p=t(10557);function M(e){let E=(0,p.Jw)(e.children,"with_clause"),t=(0,p.Jw)(e.children,"select_no_parens"),n=(0,p.Jw)(e.children,"select_with_parens"),a=t?h(t):P(n);if(!a)return null;let T=function(e){let E=(0,p.Jw)(e.children,"common_table_expr"),t=(0,p.Jw)(e.children,"with_list");return E?[D(E)]:function e(E){let t=(0,p.Jw)(E.children,"with_list"),n=(0,p.Jw)(E.children,"common_table_expr");return t?e(t).concat(D(n)):[D(n)]}(t)}(E);return a.withTables=T,a}function D(e){var E,t,n;let a,T;let r=(0,p.Jw)(e.children,"relation_name"),l=(0,p.Jw)(e.children,"opt_column_alias_name_list"),A=e.children[4],i=r.getText();switch((null===(E=null==l?void 0:l.children)||void 0===E?void 0:E.length)&&(a=function e(E){let t=(0,p.Jw)(E.children,"column_alias_name"),n=(0,p.Jw)(E.children,"alias_name_list");return n?e(n).concat(t.getText()):[t.getText()]}(l.children[1])),A.type){case"select_no_parens":T=h(A);break;case"with_select":T=M(A);break;case"select_with_parens":T=P(A);break;case"subquery":{T=U(A);let E=(0,p.Jw)(e.children,"order_by"),a=(0,p.Jw)(e.children,"opt_fetch_next");E&&T.mergeOrderBy(b(E)),(null===(t=null==a?void 0:a.children)||void 0===t?void 0:t[0])&&T.addLocation(null===(n=null==a?void 0:a.children)||void 0===n?void 0:n[0].location)}}return{columnAlias:a,tableName:i,location:e.location,query:T}}function U(e){let E=e.children[0];switch(E.type){case"select_no_parens":return h(E);case"select_with_parens":return P(E);case"with_select":return M(E);default:return null}}function P(e){let E;let t=e.children[1],n=(0,p.Jw)(e.children,"order_by"),a=(0,p.Jw)(e.children,"fetch_next_clause");switch(t.type){case"select_no_parens":E=h(t);break;case"select_with_parens":E=P(t);break;case"with_select":E=M(t);break;default:E=null}return E?(n&&E.mergeOrderBy(b(n)),a&&E.addLocation(a.location),E):null}function h(e){let E=e.children[0];return"select_clause"===E.type?function(e){var E;let t=null===(E=e.children)||void 0===E?void 0:E[0];switch(t.type){case"no_table_select":case"no_table_select_with_hierarchical_query":return f(t);case"simple_select":return B(t);case"select_with_hierarchical_query":return new u.A(null,[],[],[]);default:return null}}(E):function e(E){let t,n;let a=(0,p.Jw)(E.children,"select_clause_set_left"),T=(0,p.Jw)(E.children,"select_clause_set_right"),r=(0,p.Jw)(E.children,"set_type"),l=(0,p.Jw)(E.children,"select_clause_set");t=l?e(l):G(a.children[0]),n=G(T);let A=r.children.map(e=>e.getText()).join(" "),i=(0,p.jZ)(t);return i.unionType=A,i.union=n,t.location=E.location,t}(E)}function f(e){let{children:E}=e,t=(0,p.Jw)(E,"DUAL");return t?new u.A(e.location,v((0,p.Jw)(E,"select_expr_list")),[{tableName:t.getText(),location:t.location}],[]):null}function B(e){let{children:E}=e;return new u.A(e.location,v((0,p.Jw)(E,"select_expr_list")),function(e){let E=e.children[0];return function e(E){let t=(0,p.Jw)(E.children,"table_reference"),n=(0,p.Jw)(E.children,"table_references"),a=g(t);return n?e(n).concat(a):[a]}(E)}((0,p.Jw)(E,"from_list")),[])}function G(e){var E;let t=null===(E=e.children)||void 0===E?void 0:E[0];switch(t.type){case"no_table_select":return f(t);case"simple_select":return B(t);case"select_with_parens":return P(t);default:return null}}function v(e){let E;let t=(0,p.Jw)(e.children,"select_expr_list"),n=(0,p.Jw)(e.children,"projection");if(!n)return[];let{children:a}=n,T=(0,p.Jw)(a,"relation_name"),r=(0,p.Jw)(a,"*"),l=(0,p.Jw)(a,"bit_expr");return(E=l?{alias:null==T?void 0:T.getText(),expr:l.getText(),location:null==l?void 0:l.location,columnName:function(e){var E,t,n,a,T;let r=(0,p.Jw)(e.children,"unary_expr");if(!r||(null===(E=r.children)||void 0===E?void 0:E.length)>1)return;let l=null===(t=r.children)||void 0===t?void 0:t[0];if(!l||(null===(n=l.children)||void 0===n?void 0:n.length)>1||(null===(a=l.children)||void 0===a?void 0:a[0].type)!=="obj_access_ref")return;let A=null===(T=l.children)||void 0===T?void 0:T[0],i=function e(E){var t;let{children:n}=E;if(5===n.length)return null;let a=(0,p.Jw)(n,"column_ref");if((null==a?void 0:a.type)!=="column_ref")return null;let T=(0,p.Jw)(n,"opt_obj_access_ref");if(!T)return[a.getText()];let r=null===(t=T.children)||void 0===t?void 0:t[1];if("*"===r.type)return[a.getText(),"*"];let l=e(r);return l?[a.getText()].concat(l):null}(A);if(i)return i}(l)}:{expr:r.getText(),location:n.location},t)?v(t).concat(E):[E]}function g(e){let E=e.children[0];return"table_factor"===E.type?H(E):function(e){let E=(0,p.Jw)(e.children,"table_reference"),t=(0,p.Jw)(e.children,"table_factor"),n=g(E);n.location=e.location;let a=H(t);return n.join=a,n}(E)}function H(e){let E=(0,p.Jw)(e.children,"tbl_name"),t=(0,p.Jw)(e.children,"table_subquery"),n=(0,p.Jw)(e.children,"table_reference");if(n)return Object.assign(Object.assign({},g(n)),{location:e.location});if(E){let t,n;let a=(0,p.Jw)(E.children,"relation_factor"),T=(0,p.Jw)(E.children,"relation_name"),r=function(e){let E=e.children[0];return"dot_relation_factor"===E.type?[E.children[1].getText()]:E.children.filter(e=>"relation_name"===e.type).map(e=>e.getText())}(a);return r.length>1?(t=r[1],n=r[0]):t=r[0],{schemaName:n,tableName:t,location:e.location,alias:null==T?void 0:T.getText()}}return t?Object.assign(Object.assign({},function(e){let E=(0,p.Jw)(e.children,"select_with_parens"),t=(0,p.Jw)(e.children,"subquery"),n=(0,p.Jw)(e.children,"relation_name"),a=(0,p.Jw)(e.children,"order_by"),T=(0,p.Jw)(e.children,"fetch_next_clause"),r=t?U(t):P(E);return a&&r.mergeOrderBy(b(a)),T&&r.addLocation(T.location),{alias:null==n?void 0:n.getText(),location:e.location,query:r}}(t)),{location:e.location}):{location:e.location}}function b(e){return{location:e.location,sortExprs:function e(E){var t,n;let a=(0,p.Jw)(E.children,"sort_list"),T=(0,p.Jw)(E.children,"sort_key");return a?e(a).concat((t=T).location):[(n=T).location]}((0,p.Jw)(e.children,"sort_list"))}}function F(e,E){if(!E)return;let[t,n]=E.location.range,a=e.get(t);if(a){let T=a.location.range[1]-a.location.range[0];n-t>T&&e.set(t,E)}else{e.set(t,E);return}}function Y(e){let E=new Map;return(0,p.gO)(e,function(e){let{type:t}=e;switch(t){case"select_no_parens":{let t=h(e);F(E,t);return}case"with_select":{let t=M(e);F(E,t);return}case"create_table_stmt":{let t=function(e){let E=(0,p.Jw)(e.children,"subquery"),t=(0,p.Jw)(e.children,"opt_order_by"),n=(0,p.Jw)(e.children,"opt_fetch_next");if(!E)return null;let a=U(E);if(!a)return null;let T=null==t?void 0:t.children[0],r=null==n?void 0:n.children[0];return T&&a.mergeOrderBy(b(T)),r&&a.addLocation(r.location),a}(e);F(E,t);return}case"view_subquery":{let t=function(e){let E=(0,p.Jw)(e.children,"subquery"),t=(0,p.Jw)(e.children,"order_by"),n=(0,p.Jw)(e.children,"fetch_next_clause");if(!E)return null;let a=U(E);return a?(t&&a.mergeOrderBy(b(t)),n&&a.addLocation(n.location),a):null}(e);F(E,t);return}case"values_clause":{let t=function(e){let E=(0,p.Jw)(e.children,"subquery"),t=(0,p.Jw)(e.children,"opt_order_by"),n=(0,p.Jw)(e.children,"opt_fetch_next");if(!E)return null;let a=U(E);if(!a)return null;let T=null==t?void 0:t.children[0],r=null==n?void 0:n.children[0];return T&&a.mergeOrderBy(b(T)),r&&a.addLocation(r.location),a}(e);F(E,t);return}case"select_stmt":{let t=function(e){var E;let t=(0,p.Jw)(e.children,"subquery"),n=(0,p.Jw)(e.children,"order_by"),a=null===(E=e.children)||void 0===E?void 0:E[e.children.length-1];if(!t)return null;let T=U(t);return T?(n&&T.mergeOrderBy(b(n)),a&&T.addLocation(a.location),T):null}(e);F(E,t);return}case"select_with_parens":{let t=P(e);F(E,t);return}case"insert_table_clause":{let t=function(e){let E=(0,p.Jw)(e.children,"subquery"),t=(0,p.Jw)(e.children,"order_by"),n=(0,p.Jw)(e.children,"opt_fetch_next"),a=(0,p.Jw)(e.children,"fetch_next_clause");if(!E)return null;let T=U(E);return T?(a=a||(null==n?void 0:n.children[0]),t&&T.mergeOrderBy(b(t)),a&&T.addLocation(a.location),T):null}(e);F(E,t);return}case"dml_table_clause":{let t=function(e){let E=(0,p.Jw)(e.children,"subquery"),t=(0,p.Jw)(e.children,"order_by"),n=(0,p.Jw)(e.children,"opt_fetch_next"),a=(0,p.Jw)(e.children,"fetch_next_clause");if(!E)return null;let T=U(E);return T?(a=a||(null==n?void 0:n.children[0]),t&&T.mergeOrderBy(b(t)),a&&T.addLocation(a.location),T):null}(e);F(E,t);return}}}),E}var V=t(8710);let y=new Set(O),w=new Set(o),x=_.InputStream,W=new Map,X=[],k=0;function K(e,E){var t,n;console.log("MaxSize:200",`currentTokenSize: ${k}`,`keys: ${X.length}`);let a=`${e}$$@@##${E}`,T=W.get(a);if(T)return null==T?void 0:T.data;let r=new C.SQLDocument({text:e,type:C.SQLType.Oracle,delimiter:E}),l=(null===(t=null==r?void 0:r.statements)||void 0===t?void 0:t.reduce((e,E)=>{var t;return((null===(t=null==E?void 0:E.tokens)||void 0===t?void 0:t.length)||0)+e},0))||0;if(W.set(a,{data:r,size:l}),k+=l,X.push(a),X.length>200){let e=X.length;X=X.slice(e-100,e);let E=X.slice(0,e-100);E.forEach(e=>{var E;k-=(null===(E=W.get(e))||void 0===E?void 0:E.size)||0,W.delete(e)})}else if(k>5e5){let e=0;for(;e<X.length-1&&!(k<5e5);e++){let E=X[e],t=(null===(n=W.get(E))||void 0===n?void 0:n.size)||0;k-=t,W.delete(E)}X=X.slice(e)}return r}class J extends x{LA(e){let E=super.LA(e);switch(E){case 0:case _.Token.EOF:return E;default:return String.fromCharCode(E).toUpperCase().charCodeAt(0)}}}var Q={getTokens(e){var E;let t=new J(e),n=new d.p(t),a=new _.CommonTokenStream(n);return a.fill(),null===(E=null==a?void 0:a.tokens)||void 0===E?void 0:E.map(e=>({type:e.type,channel:e.channel,start:e.start,stop:e.stop,text:e.text}))},getOffsetLeftTokens(e,E,t){var n,a,T,r;console.time("lexer");let l=K(e,E);console.timeEnd("lexer");let A=l.statements.find(e=>e.start<=t&&e.stop>=t);if(!A){let e=null===(n=null==l?void 0:l.statements)||void 0===n?void 0:n.length;return e?(A=null===(a=null==l?void 0:l.statements)||void 0===a?void 0:a[e-1],this.getTokens(A.text)):[]}let i=null===(r=null===(T=A.tokens)||void 0===T?void 0:T.reverse)||void 0===r?void 0:r.call(T),R=i.findIndex(e=>e.stop<t),N=i.slice(R,i.length).reverse().map(e=>({type:e.type,channel:e.channel,start:e.start,stop:e.stop,text:e.text}));return N},getAllFromTable(e,E,t){var n,a;let T=K(e,E),r=T.statements.find(e=>e.start<=t&&e.stop>=t);if(!r){let e=null===(n=null==T?void 0:T.statements)||void 0===n?void 0:n.length;if(!e)return{tables:[],tableVariables:[]};r=null===(a=null==T?void 0:T.statements)||void 0===a?void 0:a[e-1]}return r.getAllFromTable()},getAutoCompletion(e,E,t){var n,a;let T;let r={NULLX:"NULL"},l=K(e,E),A=l.statements.find(e=>e.start<=t-1&&e.stop>=t-1);if(!A)return null;function i(e,t){var n,a,T,l;let A,i,R,N,S;let s=[],O=(null===(n=e.text)||void 0===n?void 0:n[t-1])===".";if(O){let n=e.text.substring(0,t-1)+" "+e.text.substring(t);e=null===(a=K(n,E).statements)||void 0===a?void 0:a[0]}let o=e.parse(t,function(e,E,t,n){A=e,i=E,R=t,N=n});function I(){(A=null==A?void 0:A.filter(e=>y.has(e)))&&(s=A.map(e=>r[e]||e))}function c(e){if(!e)return{schema:"",tableName:""};let E=e.split(".");return 1===E.length?{schema:"",tableName:E[0]}:{schema:E[0],tableName:E[1]}}if(o.insertStmt)return I(),o.insertStmt.table?s.push({type:"tableColumns",autoNext:!1,tableName:c(o.insertStmt.table.getText()).tableName,schemaName:c(o.insertStmt.table.getText()).schema}):(s.push({type:"allSchemas"}),s.push({type:"allTables",disableSys:!0})),s;if(o.updateStmt)return I(),o.updateStmt.table?s.push({type:"tableColumns",autoNext:!1,tableName:c(o.updateStmt.table.getText()).tableName,schemaName:c(o.updateStmt.table.getText()).schema}):(s.push({type:"allSchemas"}),s.push({type:"allTables",disableSys:!0})),s;if(o.deleteStmt)return I(),o.deleteStmt.table?s.push({type:"tableColumns",autoNext:!1,tableName:c(o.deleteStmt.table.getText()).tableName,schemaName:c(o.deleteStmt.table.getText()).schema}):(s.push({type:"allSchemas"}),s.push({type:"allTables",disableSys:!0})),s;if(O){let e="";if(!N)return s=[],[];let E=[],n=N.reverse();for(let t=1;t<n.length;t+=2)if(E.push(n[t]),"."!=n[t+1]){e=E.reverse().join(".");break}if(o.error)return s.push({type:"objectAccess",objectName:e}),s;let a=Y(o.result),T=(0,V.D)(a,t-1);if(!T)return s=[];let r=null==T?void 0:T.getContext(t-1);if(r===u.N.FromList)return s=[{type:"allTables",schema:e}];{let E,t,n;for(let a of T.fromTables){let T;if(a.alias?T=a.alias:a.tableName&&(T=[a.schemaName,a.tableName].filter(Boolean).join(".")),T===e){n=!!a.query,E=a.tableName,t=a.schemaName;break}}return E&&!n?s=[{type:"tableColumns",tableName:E,schemaName:t}]:(s.push({type:"objectAccess",objectName:e}),s)}}I();let m=Y(o.result);S=(0,V.D)(m,t);let L=null==S?void 0:S.getContext(t);return L===u.N.SelectList||L===u.N.WhereAndGruopBy?(null===(T=null==S?void 0:S.fromTables)||void 0===T||T.forEach(e=>{e.alias?(null==s||s.push({type:"fromTable",tableName:e.alias}),!e.query&&e.tableName&&(null==s||s.push({type:"tableColumns",tableName:e.tableName,schemaName:e.schemaName}))):e.tableName&&(null==s||s.push({type:"fromTable",tableName:e.tableName,schemaName:e.schemaName}),null==s||s.push({type:"tableColumns",tableName:e.tableName,schemaName:e.schemaName}))}),null==s||s.push({type:"allFunction"})):L===u.N.FromList&&(s.push({type:"allTables"}),s.push({type:"allSchemas"}),null===(l=null==S?void 0:S.withTables)||void 0===l||l.forEach(e=>{s.push({type:"withTable",tableName:e.tableName})})),console.log(i,R),console.log(o),console.log(m),Array.from(new Set(s))}if(!A.isPL)return i(A,t-A.start);let R=t-A.start,N=A.parse(R,function(e,E,t){T=e}),S=null==N?void 0:N.yy.sqlStmt,s=null==S?void 0:S.find(e=>{var E,t;let n=null===(E=e.begin.range)||void 0===E?void 0:E[0],a=null===(t=e.end.range)||void 0===t?void 0:t[0];return!!(n<=R)&&(!a||!!(a>=R))}),O={NULLX:"NULL",BEGIN_KEY:"BEGIN",END_KEY:"END",SQL_KEYWORD:"SELECT",PACKAGE_P:"PACKAGE"};if(s){let e=A.text,t=e.substring(s.begin.range[0],null===(n=s.end.range)||void 0===n?void 0:n[0]),T=R-s.begin.range[0];console.log("<"+t+">");let r=K(t,E),l=null===(a=r.statements)||void 0===a?void 0:a[0];return l?i(l,T):null}return T=null==(T=null==T?void 0:T.filter(e=>w.has(e)))?void 0:T.map(e=>O[e]||e)},getOffsetType(e,E,t){var n;let a;if(!e)return null;let T=K(e,E),r=T.statements.find(e=>e.start<=t-1&&e.stop>=t-1);if(!r||r.isPL)return null;t-=r.start;let l=r.parse(t,()=>{});if(!l)return null;let A=Y(l.result);if(A.forEach((e,E)=>{let n=e.location;if(n&&n.range[0]<=t&&n.range[1]>=t&&(!a||a.location&&a.location.range[0]<n.range[0])){a=e;return}}),!a)return null;let i=a.fromTables.find(e=>{let{location:E}=e;return E.range[0]<=t&&E.range[1]>=t});if(i)return i.query?null:{type:"table",name:i.tableName||"",schema:i.schemaName};let R=a.selectColumns.find(e=>{let{location:E}=e;return E.range[0]<=t&&E.range[1]>=t});if(R){if(!R.columnName||!(R.columnName instanceof Array)||(null===(n=R.columnName)||void 0===n?void 0:n.length)<2)return null;let e=R.columnName[0],E=a.fromTables.find(E=>E.alias===e||E.tableName===e);return E?{type:"table",name:E.tableName||"",schema:E.schemaName}:null}return null}},Z=class{constructor(e){this.plugin=null,this.plugin=e}provideHover(e,E,t){var n,a;if(null===(a=null===(n=this.plugin)||void 0===n?void 0:n.modelOptionsMap.get(e.id))||void 0===a?void 0:a.getTableDDL)return new Promise((t,n)=>{var a,T,r,l;return a=this,T=void 0,r=void 0,l=function*(){var n,a,T,r,l;let A=e.getWordAtPosition(E);if(!A)return t(null);let i=(null===(a=null===(n=this.plugin)||void 0===n?void 0:n.modelOptionsMap.get(e.id))||void 0===a?void 0:a.delimiter)||";",R=e.getOffsetAt(E),N=yield Q.getOffsetType(e.getValue(),i,R);if(!N){t(null);return}let{type:S,name:s,schema:O}=N;if(!s){t(null);return}let o=yield null===(l=null===(r=null===(T=this.plugin)||void 0===T?void 0:T.modelOptionsMap.get(e.id))||void 0===r?void 0:r.getTableDDL)||void 0===l?void 0:l.call(r,s,O);if(!o){t(null);return}t({contents:[{value:"```sql\n "+o+" \n```"}]})},new(r||(r=Promise))(function(e,E){function t(e){try{A(l.next(e))}catch(e){E(e)}}function n(e){try{A(l.throw(e))}catch(e){E(e)}}function A(E){var a;E.done?e(E.value):((a=E.value)instanceof r?a:new r(function(e){e(a)})).then(t,n)}A((l=l.apply(a,T||[])).next())})})}};function q(e){n.Mj.register({id:a.$.OB_Oracle}),n.Mj.setMonarchTokensProvider(a.$.OB_Oracle,c),n.Mj.setLanguageConfiguration(a.$.OB_Oracle,I),n.Mj.registerCompletionItemProvider(a.$.OB_Oracle,new s(e)),n.Mj.registerHoverProvider(a.$.OB_Oracle,new Z(e)),n.Mj.registerDocumentFormattingEditProvider(a.$.OB_Oracle,new m.m(e,a.$.OB_Oracle)),n.Mj.registerDocumentRangeFormattingEditProvider(a.$.OB_Oracle,new m.X(e,a.$.OB_Oracle)),n.Mj.registerInlineCompletionsProvider(a.$.OB_Oracle,new L.Z(e))}}}]);