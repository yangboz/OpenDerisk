"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7017],{37017:function(e,n,t){t.r(n),t.d(n,{setup:function(){return Q}});var E=t(56057),a=t(84223),r=t(3280);let i=[{name:"CURDATE",params:[],desc:"返回当前日期，不含时间部分。"},{name:"CURRENT_DATE",params:[],desc:"返回当前日期，不含时间部分。"},{name:"CURRENT_TIME",params:[{name:"scale"}],desc:"返回当前时间，不含日期部分。"},{name:"CURRENT_TIMESTAMP",params:[{name:"scale"}],desc:"返回当前日期时间，考虑时区设置。"},{name:"CURTIME",params:[],desc:"返回当前时间，不含日期部分。"},{name:"DATE_ADD",params:[{name:"date"},{name:"INTERVAL"}],desc:"日期时间的算术计算。"},{name:"DATE_FORMAT",params:[{name:"date"},{name:"format"}],desc:"将日期时间以指定格式输出。"},{name:"DATE_SUB",params:[{name:"date"},{name:"INTERVAL"}],desc:"日期时间的算术计算。"},{name:"DATEDIFF",params:[{name:"date1"},{name:"date2"}],desc:"返回 date1 和 date2 之间的天数。"},{name:"EXTRACT",body:"EXTRACT(${1:unit} FROM ${2:date})",desc:"以整数类型返回 date 的指定部分值。"},{name:"FROM_DAYS",params:[{name:"N"}],desc:"返回指定天数 N 对应的 DATE 值。"},{name:"FROM_UNIXTIME",params:[{name:"unix_timestamp"},{name:"format"}],desc:"返回指定格式的日期时间字符串。"},{name:"MONTH",params:[{name:"date"}],desc:"返回 date 的月份信息。"},{name:"NOW",params:[{name:"scale"}],desc:"返回当前日期时间，考虑时区设置。"},{name:"PERIOD_DIFF",params:[{name:"p1"},{name:"p2"}],desc:"以月份位单位返回两个日期之间的间隔。"},{name:"STR_TO_DATE",params:[{name:"str"},{name:"format"}],desc:"使用 format 将 str 转换为 DATETIME 值、DATE 值、或 TIME 值。"},{name:"TIME",params:[{name:"datetime"}],desc:"以 TIME 类型返回 datetime 的时间信息。"},{name:"TIME_TO_USEC",params:[{name:"date"}],desc:"将 date 值转换为距离 1970-01-01 00:00:00.000000 的微秒数，考虑时区信息。"},{name:"TIMEDIFF",params:[{name:"date1"},{name:"date2"}],desc:"以 TIME 类型返回两个日期时间的时间间隔。"},{name:"TIMESTAMPDIFF",params:[{name:"unit"},{name:"date1"},{name:"date2"}],desc:"以 unit 为单位返回两个日期时间的间隔。"},{name:"TIMESTAMPADD",params:[{name:"unit"},{name:"interval_expr"},{name:"date"}],desc:"日期时间的算术计算。"},{name:"TO_DAYS",params:[{name:"date"}],desc:"返回指定 date 值对应的天数。"},{name:"USEC_TO_TIME",params:[{name:"usec"}],desc:"将 usec 值转换为 TIMESTAMP 类型值。"},{name:"UNIX_TIMESTAMP",params:[{name:"date"}],desc:"返回指定时间距离 '1970-01-01 00:00:00' 的秒数，考虑时区。"},{name:"UTC_TIMESTAMP",params:[],desc:"返回当前 UTC 时间。"},{name:"YEAR",params:[{name:"date"}],desc:"返回 date 值的年份信息。"},{name:"CONCAT",params:[{name:"str"}],desc:"把多个字符串连接成一个字符串。"},{name:"CONCAT_WS",params:[{name:"separator"},{name:"str"}],desc:"把多个字符串连接成一个字符串，相邻字符串间使用 separator 分隔。"},{name:"FORMAT",params:[{name:"x"},{name:"d"}],desc:"把数字 X 格式化为“#,###,###.##”格式，四舍五入到 D 位小数，并以字符串形式返回结果（如果整数部分超过三位，会用“,”作为千分位分隔符）。"},{name:"SUBSTR",params:[{name:"str"},{name:"pos"}],desc:"返回 str 的子字符串，起始位置为 pos，长度为 len。"},{name:"SUBSTRING",params:[{name:"str"},{name:"pos"}],desc:"返回 str 的子字符串，起始位置为 pos，长度为 len。"},{name:"TRIM",params:[{name:"x"}],desc:"删除字符串所有前缀和/或后缀，默认为 BOTH。"},{name:"LTRIM",params:[{name:"str"}],desc:"删除字符串左侧的空格。"},{name:"RTRIM",params:[{name:"str"}],desc:"删除字符串右侧的空格。"},{name:"ASCII",params:[{name:"str"}],desc:"返回字符串最左侧字符的 ASCII 码。"},{name:"ORD",params:[{name:"str"}],desc:"返回字符串最左侧字符的字符码。"},{name:"LENGTH",params:[{name:"str"}],desc:"返回 str 的字节长度。"},{name:"CHAR_LENGTH",params:[{name:"str"}],desc:"返回字符串包含的字符数。"},{name:"UPPER",params:[{name:"str"}],desc:"将字符串中的小写字母转化为大写字母。"},{name:"LOWER",params:[{name:"str"}],desc:"将字符串中的大写字母转化为小写字母。"},{name:"HEX",params:[{name:"str"}],desc:"将数字或字符串转化为十六进制字符串。"},{name:"UNHEX",params:[{name:"str"}],desc:"将十六进制字符串转化为正常字符串。"},{name:"MD5",params:[{name:"str"}],desc:"返回字符串的 MD5 值。"},{name:"INT2IP",params:[{name:"int_value"}],desc:"将整数内码转换成 IP 地址。"},{name:"IP2INT",params:[{name:"ip_addr"}],desc:"将 IP 地址转换成整数内码。"},{name:"LIKE",body:"LIKE ${1:str}",desc:"字符串通配符匹配。"},{name:"REGEXP",body:"REGEXP ${1:str}",desc:"正则匹配。"},{name:"REPEAT",params:[{name:"str"},{name:"count"}],desc:"返回 str 重复 count 次组成的字符串。"},{name:"SPACE",params:[{name:"N"}],desc:"返回包含 N 个空格的字符串。"},{name:"SUBSTRING_INDEX",params:[{name:"str"},{name:"delim"},{name:"count"}],desc:"在定界符 delim 以及 count 出现前，从字符串 str 返回字符串。"},{name:"LOCATE",params:[{name:"substr"},{name:"str"}],desc:"第一个语法返回字符串 str 中子字符串 substr 的第一个出现位置。"},{name:"POSITION",params:[{name:"substr"},{name:"str"}],desc:"第一个语法返回字符串 str 中子字符串 substr 的第一个出现位置。"},{name:"INSTR",params:[{name:"str"},{name:"substr"}],desc:"返回字符串 str 中子字符串的第一个出现位置。"},{name:"REPLACE",params:[{name:"str"},{name:"from_str"},{name:"to_str"}],desc:"返回字符串 str 以及所有被字符 to_str 替代的字符串 from_str。"},{name:"FIELD",params:[{name:"str"}],desc:"返回参数 str 在 str1, str2, str3,… 列表中的索引位置（从 1 开始的位置）。"},{name:"ELT",params:[{name:"N"},{name:"str"}],desc:"若 N=1，则返回值为 str1；若 N=2，则返回值为 str2；以此类推。"},{name:"INSERT",params:[{name:"str1"},{name:"pos"},{name:"len"},{name:"str2"}],desc:"返回字符串 str1，字符串中起始于 pos 位置，长度为 len 的子字符串将被 str2 取代。"},{name:"LPAD",params:[{name:"str"},{name:"len"},{name:"padstr"}],desc:"用指定字符串 padstr，在左侧填充字符串 str 到指定长度 len。"},{name:"RPAD",params:[{name:"str"},{name:"len"},{name:"padstr"}],desc:"用指定字符串 padstr，在右侧填充字符串 str 到指定长度 len。"},{name:"UUID",params:[],desc:"生成一个全局唯一 ID。"},{name:"BIN",params:[{name:"N"}],desc:"返回数字 N 的二进制形式。"},{name:"QUOTE",params:[{name:"str"}],desc:"引用一个字符串以产生一个结果可以作为 SQL 语句中正确地转义数据值。"},{name:"REGEXP_SUBSTR",params:[{name:"str"},{name:"pattern"}],desc:"在 str 中搜索匹配正则表达式 pattern 的子串，子串不存在返回 NULL。"},{name:"CAST",body:"CAST(${1:expr} AS ${2:type})",desc:"将某种数据类型的表达式显式转换为另一种数据类型。"},{name:"ROUND",params:[{name:"X"}],desc:"返回一个数值，四舍五入到指定的长度或精度。"},{name:"CEIL",params:[{name:"expr"}],desc:"返回大于或者等于指定表达式的最小整数。"},{name:"FLOOR",params:[{name:"expr"}],desc:"返回小于或者等于指定表达式的最大整数。"},{name:"ABS",params:[{name:"expr"}],desc:"绝对值函数，求表达式绝对值，函数返回值类型与数值表达式的数据类型相同。"},{name:"NEG",params:[{name:"expr"}],desc:"求补函数，对操作数执行求补运算：用零减去操作数，然后结果返回操作数。"},{name:"SIGN",params:[{name:"X"}],desc:"SIGN(X) 返回参数作为 -1、 0 或 1 的符号，该符号取决于 X 的值为负、零或正。"},{name:"CONV",params:[{name:"N"},{name:"from_base"},{name:"to_base"}],desc:"不同数基间转换数字。"},{name:"MOD",params:[{name:"N"},{name:"M"}],desc:"取余函数。"},{name:"POW",params:[{name:"X"},{name:"Y"}],desc:"返回 X 的 Y 次方。"},{name:"POWER",params:[{name:"X"},{name:"Y"}],desc:"返回 X 的 Y 次方。"},{name:"RAND",params:[{name:"value1"}],desc:"RAND([N]) 函数接受 0 个或者 1 个参数（N 被称为随机数种子），返回一个范围是 [0,1.0) 的随机浮点数。"},{name:"GREATEST",params:[{name:"value1"}],desc:"返回参数的最大值，和函数 LEAST() 相对。"},{name:"LEAST",params:[{name:"value1"}],desc:"返回参数的最小值，和函数 GREATEST() 相对。"},{name:"ISNULL",params:[{name:"expr"}],desc:"如果参数 expr 为 NULL，那么 ISNULL() 的返回值为 1，否则返回值为 0。"},{name:"IF",params:[{name:"expr1"},{name:"expr2"},{name:"expr3"}],desc:"如果 expr1 的值为 TRUE（即：expr1<>0 且 expr1<>NULL），返回结果为 expr2；否则返回结果为 expr3。"},{name:"IFNULL",params:[{name:"expr1"},{name:"expr2"}],desc:"假设 expr1 不为 NULL，则 IFNULL() 的返回值为 expr1；否则其返回值为 expr2。"},{name:"NULLIF",params:[{name:"expr1"},{name:"expr2"}],desc:"如果 expr1 = expr2 成立，那么返回值为 NULL，否则返回值为 expr1。"}].concat([{name:"AVG",params:[{name:"expr"}],desc:"返回数值列的平均值。"},{name:"COUNT",params:[{name:"expr"}],desc:"该函数返回 SELECT 语句检索到的行中非 NULL 值的数目。"},{name:"SUM",params:[{name:"expr"}],desc:"返回参数中指定列的和。"},{name:"GROUP_CONCAT",params:[{name:"expr"}],desc:"返回带有来自一个组的连接的非 NULL 值的字符串结果。"},{name:"MAX",params:[{name:"expr"}],desc:"返回参数中指定的列中的最大值。"},{name:"MIN",params:[{name:"expr"}],desc:"返回参数中指定列的最小值。"}]).concat([]).concat([{name:"FOUND_ROWS",params:[],desc:"一个 SELECT 语句可能包含一个 LIMIT 子句，用来限制数据库服务器端返回客户端的行数。在某些情况下，我们需要不再次运行该语句而得知在没有 LIMIT 时到底该语句返回了多少行。我们可以在 SELECT 语句中选择使用 SQL_CALC_FOUND_ROWS，然后调用 FOUND_ROWS() 函数，获取该语句在没有 LIMIT 时返回的行数。"},{name:"LAST_INSERT_ID",params:[],desc:"返回本 SESSION 最后一次插入的自增字段值，如最近一条 INSERT 插入多条记录，LAST_INSERT_ID() 返回第一条记录的自增字段值。"}]).concat([{name:"COALESCE",params:[{name:"expr"}],desc:"依次参考各参数表达式，遇到非 NULL 值即停止并返回该值。"},{name:"NVL",params:[{name:"str1"},{name:"replace_with"}],desc:"如果 str1 为 NULL，则替换成 replace_with。"},{name:"MATCH",body:"MATCH (${1:cols}) AGAINST (${2:expr})",desc:"全文查找函数"}]);var l=t(80345),o=t(18038);let s=new o.q(window.obMonaco.getWorkerUrl("mysql")),T=l.Ud(s.getWorker());var S=t(11184),R=function(e,n,t,E){return new(t||(t=Promise))(function(a,r){function i(e){try{o(E.next(e))}catch(e){r(e)}}function l(e){try{o(E.throw(e))}catch(e){r(e)}}function o(e){var n;e.done?a(e.value):((n=e.value)instanceof t?n:new t(function(e){e(n)})).then(i,l)}o((E=E.apply(e,n||[])).next())})},I=class{constructor(e){this.triggerCharacters=["."],this.plugin=null,this.plugin=e}getModelOptions(e){var n;return null===(n=this.plugin)||void 0===n?void 0:n.modelOptionsMap.get(e)}provideCompletionItems(e,n,t,E){let{offset:a,value:r,delimiter:i,range:l,triggerCharacter:o}=(0,S.y)(e,n,t,this.plugin);return this.getCompleteWordFromOffset(a,r,i,l,e,o)}getColumnList(e,n,t){var E;return R(this,void 0,void 0,function*(){let a=this.getModelOptions(e.id),i=[],l=yield null===(E=null==a?void 0:a.getTableColumns)||void 0===E?void 0:E.call(a,n.tableName,n.schemaName);return l&&l.forEach(e=>{i.push((0,r.yD)(e.columnName,n.tableName,n.schemaName,t))}),i})}getSchemaList(e,n){var t;return R(this,void 0,void 0,function*(){let E=this.getModelOptions(e.id),a=[],i=yield null===(t=null==E?void 0:E.getSchemaList)||void 0===t?void 0:t.call(E);return i&&i.forEach(e=>{a.push((0,r.lW)(e,n))}),a})}getTableList(e,n,t){var E;return R(this,void 0,void 0,function*(){let a=this.getModelOptions(e.id),i=[],l=yield null===(E=null==a?void 0:a.getTableList)||void 0===E?void 0:E.call(a,n);return l&&l.forEach(e=>{i.push((0,r.Pf)(e,n,!1,t))}),i})}getFunctions(e,n){var t;return R(this,void 0,void 0,function*(){let E=this.getModelOptions(e.id),a=yield null===(t=null==E?void 0:E.getFunctions)||void 0===t?void 0:t.call(E);return(a||[]).concat(i).map(e=>(0,r.Ht)(e,n))})}getSnippets(e,n){var t;return R(this,void 0,void 0,function*(){let E=this.getModelOptions(e.id),a=yield null===(t=null==E?void 0:E.getSnippets)||void 0===t?void 0:t.call(E);return(a||[]).map(e=>(0,r.k8)(e,n))})}getCompleteWordFromOffset(e,n,t,E,a,i){var l;return R(this,void 0,void 0,function*(){let i=T.parser,o=yield i.getAutoCompletion(n,t,e);if(o){let e=this.getModelOptions(a.id),n=[],t=!0;for(let i of o)if("string"!=typeof i&&(t=!1),"string"==typeof i)n.push((0,r.Lx)(i,E));else if("allTables"===i.type)n=n.concat((yield this.getTableList(a,i.schema,E)));else if("tableColumns"===i.type)n=n.concat((yield this.getColumnList(a,i,E)));else if("withTable"===i.type)n.push((0,r.Pf)(i.tableName,"CTE",!1,E));else if("allSchemas"===i.type)n=n.concat((yield this.getSchemaList(a,E)));else if("objectAccess"===i.type){let t=i.objectName,r=yield null===(l=null==e?void 0:e.getSchemaList)||void 0===l?void 0:l.call(e),o=null==r?void 0:r.find(e=>e===t);if(o){n=n.concat((yield this.getTableList(a,i.objectName,E)));continue}let s=t.split("."),T=s.length>1?s[1]:s[0],S=s.length>1?s[0]:void 0,R=yield this.getColumnList(a,{tableName:T,schemaName:S},E);(null==R?void 0:R.length)&&(n=n.concat(R))}else"fromTable"===i.type?n.push((0,r.Pf)(i.tableName,i.schemaName,!0,E)):"allFunction"===i.type&&(n=n.concat((yield this.getFunctions(a,E))));return t&&(n=n.concat((yield this.getSnippets(a,E)))),{suggestions:n,incomplete:!1}}return{suggestions:[],incomplete:!1}})}};let N=["STAR","ACCOUNT","ACTION","ACTIVE","ADMIN","AFTER","AGAINST","AGGREGATE","ALGORITHM","ALWAYS","ANY","ARRAY","ASCII","ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS","AT","ATTRIBUTE","AUTHENTICATION","AUTOEXTEND_SIZE","AUTO_INCREMENT","AVG","AVG_ROW_LENGTH","BACKUP","BEGIN","BINLOG","BIT","BLOCK","BOOL","BOOLEAN","BTREE","BUCKETS","BYTE","CACHE","CASCADED","CATALOG_NAME","CHAIN","CHALLENGE_RESPONSE","CHANGED","CHANNEL","CHARSET","CHECKSUM","CIPHER","CLASS_ORIGIN","CLIENT","CLONE","CLOSE","COALESCE","CODE","COLLATION","COLUMNS","COLUMN_FORMAT","COLUMN_NAME","COMMENT","COMMIT","COMMITTED","COMPACT","COMPLETION","COMPONENT","COMPRESSED","COMPRESSION","CONCURRENT","CONNECTION","CONSISTENT","CONSTRAINT_CATALOG","CONSTRAINT_NAME","CONSTRAINT_SCHEMA","CONTAINS","CONTEXT","CPU","CURRENT","CURSOR_NAME","DATA","DATAFILE","DATE","DATETIME","DAY","DEALLOCATE","DEFAULT_AUTH","DEFINER","DEFINITION","DELAY_KEY_WRITE","DESCRIPTION","DIAGNOSTICS","DIRECTORY","DISABLE","DISCARD","DISK","DO","DUMPFILE","DUPLICATE","DYNAMIC","ENABLE","ENCRYPTION","END","ENDS","ENFORCED","ENGINE","ENGINES","ENGINE_ATTRIBUTE","ENUM","ERROR","ERRORS","ESCAPE","EVENT","EVENTS","EVERY","EXCHANGE","EXCLUDE","EXECUTE","EXPANSION","EXPIRE","EXPORT","EXTENDED","EXTENT_SIZE","FACTOR","FAILED_LOGIN_ATTEMPTS","FAST","FAULTS","FIELDS","FILE","FILE_BLOCK_SIZE","FILTER","FINISH","FIRST","FIXED","FLUSH","FOLLOWING","FOLLOWS","FORMAT","FOUND","FULL","GENERAL","GEOMCOLLECTION","GEOMETRY","GEOMETRYCOLLECTION","GET_FORMAT","GET_MASTER_PUBLIC_KEY","GET_SOURCE_PUBLIC_KEY","GLOBAL","GRANTS","GROUP_REPLICATION","GTID_ONLY","HANDLER","HASH","HELP","HISTOGRAM","HISTORY","HOST","HOSTS","HOUR","IDENTIFIED","IGNORE_SERVER_IDS","IMPORT","INACTIVE","INDEXES","INITIAL","INITIAL_SIZE","INITIATE","INSERT_METHOD","INSTALL","INSTANCE","INVISIBLE","INVOKER","IO","IO_THREAD","IPC","ISOLATION","ISSUER","JSON","JSON_VALUE","KEYRING","KEY_BLOCK_SIZE","LANGUAGE","LAST","LEAVES","LESS","LEVEL","LINESTRING","LIST","LOCAL","LOCKED","LOCKS","LOGFILE","LOGS","MASTER","MASTER_AUTO_POSITION","MASTER_COMPRESSION_ALGORITHMS","MASTER_CONNECT_RETRY","MASTER_DELAY","MASTER_HEARTBEAT_PERIOD","MASTER_HOST","MASTER_LOG_FILE","MASTER_LOG_POS","MASTER_PASSWORD","MASTER_PORT","MASTER_PUBLIC_KEY_PATH","MASTER_RETRY_COUNT","MASTER_SSL","MASTER_SSL_CA","MASTER_SSL_CAPATH","MASTER_SSL_CERT","MASTER_SSL_CIPHER","MASTER_SSL_CRL","MASTER_SSL_CRLPATH","MASTER_SSL_KEY","MASTER_TLS_CIPHERSUITES","MASTER_TLS_VERSION","MASTER_USER","MASTER_ZSTD_COMPRESSION_LEVEL","MAX_CONNECTIONS_PER_HOUR","MAX_QUERIES_PER_HOUR","MAX_ROWS","MAX_SIZE","MAX_UPDATES_PER_HOUR","MAX_USER_CONNECTIONS","MEDIUM","MEMBER","MEMORY","MERGE","MESSAGE_TEXT","MICROSECOND","MIGRATE","MINUTE","MIN_ROWS","MODE","MODIFY","MONTH","MULTILINESTRING","MULTIPOINT","MULTIPOLYGON","MUTEX","MYSQL_ERRNO","NAME","NAMES","NATIONAL","NCHAR","NDB","NDBCLUSTER","NESTED","NETWORK_NAMESPACE","NEVER","NEW","NEXT","NO","NODEGROUP","NONE","NOWAIT","NO_WAIT","NULLS","NUMBER","NVARCHAR","OFF","OFFSET","OJ","OLD","ONE","ONLY","OPEN","OPTIONAL","OPTIONS","ORDINALITY","ORGANIZATION","OTHERS","OWNER","PACK_KEYS","PAGE","PARSER","PARTIAL","PARTITIONING","PARTITIONS","PASSWORD","PASSWORD_LOCK_TIME","PATH","PERSIST","PERSIST_ONLY","PHASE","PLUGIN","PLUGINS","PLUGIN_DIR","POINT","POLYGON","PORT","PRECEDES","PRECEDING","PREPARE","PRESERVE","PREV","PRIVILEGES","PRIVILEGE_CHECKS_USER","PROCESS","PROCESSLIST","PROFILE","PROFILES","PROXY","QUARTER","QUERY","QUICK","RANDOM","READ_ONLY","REBUILD","RECOVER","REDO_BUFFER_SIZE","REDUNDANT","REFERENCE","REGISTRATION","RELAY","RELAYLOG","RELAY_LOG_FILE","RELAY_LOG_POS","RELAY_THREAD","RELOAD","REMOVE","REORGANIZE","REPAIR","REPEATABLE","REPLICA","REPLICAS","REPLICATE_DO_DB","REPLICATE_DO_TABLE","REPLICATE_IGNORE_DB","REPLICATE_IGNORE_TABLE","REPLICATE_REWRITE_DB","REPLICATE_WILD_DO_TABLE","REPLICATE_WILD_IGNORE_TABLE","REPLICATION","REQUIRE_ROW_FORMAT","REQUIRE_TABLE_PRIMARY_KEY_CHECK","RESET","RESOURCE","RESPECT","RESTART","RESTORE","RESUME","RETAIN","RETURNED_SQLSTATE","RETURNING","RETURNS","REUSE","REVERSE","ROLE","ROLLBACK","ROLLUP","ROTATE","ROUTINE","ROW_COUNT","ROW_FORMAT","RTREE","SAVEPOINT","SCHEDULE","SCHEMA_NAME","SECOND","SECONDARY","SECONDARY_ENGINE","SECONDARY_ENGINE_ATTRIBUTE","SECONDARY_LOAD","SECONDARY_UNLOAD","SECURITY","SERIAL","SERIALIZABLE","SERVER","SESSION","SHARE","SHUTDOWN","SIGNED","SIMPLE","SKIP","SLAVE","SLOW","SNAPSHOT","SOCKET","SOME","SONAME","SOUNDS","SOURCE","SOURCE_AUTO_POSITION","SOURCE_BIND","SOURCE_COMPRESSION_ALGORITHMS","SOURCE_CONNECTION_AUTO_FAILOVER","SOURCE_CONNECT_RETRY","SOURCE_DELAY","SOURCE_HEARTBEAT_PERIOD","SOURCE_HOST","SOURCE_LOG_FILE","SOURCE_LOG_POS","SOURCE_PASSWORD","SOURCE_PORT","SOURCE_PUBLIC_KEY_PATH","SOURCE_RETRY_COUNT","SOURCE_SSL","SOURCE_SSL_CA","SOURCE_SSL_CAPATH","SOURCE_SSL_CERT","SOURCE_SSL_CIPHER","SOURCE_SSL_CRL","SOURCE_SSL_CRLPATH","SOURCE_SSL_KEY","SOURCE_SSL_VERIFY_SERVER_CERT","SOURCE_TLS_CIPHERSUITES","SOURCE_TLS_VERSION","SOURCE_USER","SOURCE_ZSTD_COMPRESSION_LEVEL","SQL_AFTER_GTIDS","SQL_AFTER_MTS_GAPS","SQL_BEFORE_GTIDS","SQL_BUFFER_RESULT","SQL_NO_CACHE","SQL_THREAD","SQL_TSI_DAY","SQL_TSI_HOUR","SQL_TSI_MINUTE","SQL_TSI_MONTH","SQL_TSI_QUARTER","SQL_TSI_SECOND","SQL_TSI_WEEK","SQL_TSI_YEAR","SRID","STACKED","START","STARTS","STATS_AUTO_RECALC","STATS_PERSISTENT","STATS_SAMPLE_PAGES","STATUS","STOP","STORAGE","STREAM","STRING","SUBCLASS_ORIGIN","SUBJECT","SUBPARTITION","SUBPARTITIONS","SUPER","SUSPEND","SWAPS","SWITCHES","TABLES","TABLESPACE","TABLE_CHECKSUM","TABLE_NAME","TEMPORARY","TEMPTABLE","TEXT","THAN","THREAD_PRIORITY","TIES","TIME","TIMESTAMP","TIMESTAMPADD","TIMESTAMPDIFF","TLS","TRANSACTION","TRIGGERS","TRUNCATE","TYPE","TYPES","UNBOUNDED","UNCOMMITTED","UNDEFINED","UNDOFILE","UNDO_BUFFER_SIZE","UNICODE","UNINSTALL","UNKNOWN","UNREGISTER","UNTIL","UPGRADE","USER","USER_RESOURCES","USE_FRM","VALIDATION","VALUE","VARIABLES","VCPU","VIEW","VISIBLE","WAIT","WARNINGS","WEEK","WEIGHT_STRING","WITHOUT","WORK","WRAPPER","X509","XA","XID","XML","YEAR","ZONE"].concat(["ACCESSIBLE","ADD","ALL","ALTER","ANALYZE","AND","AS","ASC","ASENSITIVE","BEFORE","BETWEEN","BIGINT","BINARY","BLOB","BOTH","BY","CALL","CASCADE","CASE","CHANGE","CHAR","CHARACTER","CHECK","COLLATE","COLUMN","CONDITION","CONSTRAINT","CONTINUE","CONVERT","CREATE","CROSS","CUBE","CUME_DIST","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","CURSOR","DATABASE","DATABASES","DAY_HOUR","DAY_MICROSECOND","DAY_MINUTE","DAY_SECOND","DEC","DECIMAL","DECLARE","DEFAULT","DELAYED","DELETE","DENSE_RANK","DESC","DESCRIBE","DETERMINISTIC","DISTINCT","DISTINCTROW","DIV","DOUBLE","DROP","DUAL","EACH","ELSE","ELSEIF","EMPTY","ENCLOSED","ESCAPED","EXCEPT","EXISTS","EXIT","EXPLAIN","FALSE","FETCH","FIRST_VALUE","FLOAT","FLOAT4","FLOAT8","FOR","FORCE","FOREIGN","FROM","FULLTEXT","FUNCTION","GENERATED","GET","GRANT","GROUP","GROUPING","GROUPS","HAVING","HIGH_PRIORITY","HOUR_MICROSECOND","HOUR_MINUTE","HOUR_SECOND","IF","IGNORE","IN","INDEX","INFILE","INNER","INOUT","INSENSITIVE","INSERT","INT","INT1","INT2","INT3","INT4","INT8","INTEGER","INTERVAL","INTO","IO_AFTER_GTIDS","IO_BEFORE_GTIDS","IS","ITERATE","JOIN","JSON_TABLE","KEY","KEYS","KILL","LAG","LAST_VALUE","LATERAL","LEAD","LEADING","LEAVE","LEFT","LIKE","LIMIT","LINEAR","LINES","LOAD","LOCALTIME","LOCALTIMESTAMP","LOCK","LONG","LONGBLOB","LONGTEXT","LOOP","LOW_PRIORITY","MASTER_BIND","MASTER_SSL_VERIFY_SERVER_CERT","MATCH","MAXVALUE","MEDIUMBLOB","MEDIUMINT","MEDIUMTEXT","MIDDLEINT","MINUTE_MICROSECOND","MINUTE_SECOND","MOD","MODIFIES","NATURAL","NOT","NO_WRITE_TO_BINLOG","NTH_VALUE","NTILE","NULL","NUMERIC","OF","ON","OPTIMIZE","OPTIMIZER_COSTS","OPTION","OPTIONALLY","OR","ORDER","OUT","OUTER","OUTFILE","OVER","PARTITION","PERCENT_RANK","PRECISION","PRIMARY","PROCEDURE","PURGE","RANGE","RANK","READ","READS","READ_WRITE","REAL","RECURSIVE","REFERENCES","REGEXP","RELEASE","RENAME","REPEAT","REPLACE","REQUIRE","RESIGNAL","RESTRICT","RETURN","REVOKE","RIGHT","RLIKE","ROW","ROWS","ROW_NUMBER","SCHEMA","SCHEMAS","SECOND_MICROSECOND","SELECT","SENSITIVE","SEPARATOR","SET","SHOW","SIGNAL","SMALLINT","SPATIAL","SPECIFIC","SQL","SQLEXCEPTION","SQLSTATE","SQLWARNING","SQL_BIG_RESULT","SQL_CALC_FOUND_ROWS","SQL_SMALL_RESULT","SSL","STARTING","STORED","STRAIGHT_JOIN","SYSTEM","TABLE","TERMINATED","THEN","TINYBLOB","TINYINT","TINYTEXT","TO","TRAILING","TRIGGER","TRUE","UNDO","UNION","UNIQUE","UNLOCK","UNSIGNED","UPDATE","USAGE","USE","USING","UTC_DATE","UTC_TIME","UTC_TIMESTAMP","VALUES","VARBINARY","VARCHAR","VARCHARACTER","VARYING","VIRTUAL","WHEN","WHERE","WHILE","WINDOW","WITH","WRITE","XOR","YEAR_MONTH","ZEROFILL"]),c={comments:{lineComment:"-- ",blockComment:["/*","*/"]},brackets:[["{","}"],["[","]"],["(",")"]],wordPattern:/[\w#$]+/i,autoClosingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:'"',close:'"'},{open:"'",close:"'"},{open:"`",close:"`"}],surroundingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:'"',close:'"'},{open:"'",close:"'"},{open:"`",close:"`"}]},m={defaultToken:"",tokenPostfix:".sql",ignoreCase:!0,brackets:[{open:"[",close:"]",token:"delimiter.square"},{open:"(",close:")",token:"delimiter.parenthesis"}],keywords:Array.from(new Set(N)),operators:[":="],builtinVariables:[],builtinFunctions:i.map(e=>e.name),pseudoColumns:["$ACTION","$IDENTITY","$ROWGUID","$PARTITION"],escapes:/\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,tokenizer:{root:[{include:"@comments"},{include:"@whitespace"},{include:"@pseudoColumns"},{include:"@numbers"},{include:"@strings"},{include:"@backTick"},{include:"@complexIdentifiers"},{include:"@scopes"},[/[;,.]/,"delimiter"],[/[()]/,"@brackets"],[/[\w@#$]+/,{cases:{"@keywords":"keyword","@operators":"operator","@builtinVariables":"string","@builtinFunctions":"type.identifier","@default":"identifier"}}],[/[<>=!%&+\-*/|~^]/,"operator"]],whitespace:[[/\s+/,"white"]],comments:[[/--+\s.*/,"comment"],[/#+.*/,"comment"],[/\/\*/,{token:"comment.quote",next:"@comment"}]],comment:[[/[^*/]+/,"comment"],[/\*\//,{token:"comment.quote",next:"@pop"}],[/./,"comment"]],pseudoColumns:[[/[$][A-Za-z_][\w@#$]*/,{cases:{"@pseudoColumns":"predefined","@default":"identifier"}}]],numbers:[[/0[xX][0-9a-fA-F]*/,"number"],[/[$][+-]*\d*(\.\d*)?/,"number"],[/((\d+(\.\d*)?)|(\.\d+))([eE][\-+]?\d+)?/,"number"]],strings:[[/N'/,{token:"string",next:"@string"}],[/'/,{token:"string",next:"@string"}]],string:[[/[^\\']+/,"string"],[/@escapes/,"string.escape"],[/\\./,"string.escape.invalid"],[/''/,"string"],[/'/,{token:"string",next:"@pop"}]],backTick:[[/`/,{token:"identifier.quote",next:"@backTickIdentifiers"}]],backTickIdentifiers:[[/[^`]+/,"string.escape"],[/`/,{token:"identifier.quote",next:"@pop"}]],complexIdentifiers:[[/\[/,{token:"identifier.quote",next:"@bracketedIdentifier"}],[/"/,{token:"identifier.quote",next:"@quotedIdentifier"}]],bracketedIdentifier:[[/[^\]]+/,"identifier"],[/]]/,"identifier"],[/]/,{token:"identifier.quote",next:"@pop"}]],quotedIdentifier:[[/[^"]+/,"identifier"],[/""/,"identifier"],[/"/,{token:"identifier.quote",next:"@pop"}]],scopes:[[/BEGIN\s+(DISTRIBUTED\s+)?TRAN(SACTION)?\b/i,"keyword"],[/BEGIN\s+TRY\b/i,{token:"keyword.try"}],[/END\s+TRY\b/i,{token:"keyword.try"}],[/BEGIN\s+CATCH\b/i,{token:"keyword.catch"}],[/END\s+CATCH\b/i,{token:"keyword.catch"}],[/(BEGIN|CASE)\b/i,{token:"keyword.block"}],[/END\b/i,{token:"keyword.block"}],[/WHEN\b/i,{token:"keyword.choice"}],[/THEN\b/i,{token:"keyword.choice"}]]}};var A=t(46090),d=t(71413),O=t(4037),u=t(93946),L=t(64774),C=t(8710),p=t(41052),_=t(10557);function U(e){let n=new Map;return(0,_.gO)(e,function(e){let{type:t}=e;if("selectStatement"===t){let t=b(e);!function(e,n){if(!n)return;let[t,E]=n.location.range,a=e.get(t);if(a){let r=a.location.range[1]-a.location.range[0];E-t>r&&e.set(t,n)}else e.set(t,n)}(n,t);return}}),n}function M(e){var n,t;let E;let a=(0,_.Jw)(e.children,"tableName"),r=(0,_.Jw)(e.children,"opt_asUid"),i=(0,_.Jw)(e.children,"uid"),l=(0,_.Jw)(e.children,"selectStatement"),o=(0,_.Jw)(e.children,"tableSources");if(a){let i=(0,_.Jw)(a.children,"fullId"),l=(0,_.Jw)(i.children,"uid"),o=(0,_.Jw)(i.children,"dottedId"),s=o?o.getText().substring(1):void 0;E={schemaName:s?l.getText():void 0,tableName:s||l.getText(),alias:(null===(n=null==r?void 0:r.children)||void 0===n?void 0:n.length)?null===(t=(0,_.Jw)(r.children,"uid"))||void 0===t?void 0:t.getText():void 0,location:e.location}}else if(l)E={query:b(l),location:e.location,alias:i.getText()};else{let n=D(o);E={joins:n,location:e.location}}return E}function D(e){var n,t;let E;let a=(0,_.Jw)(e.children,"tableSource"),r=(0,_.Jw)(e.children,"tableSources"),i=(0,_.Jw)(null==a?void 0:a.children,"tableSourceItem"),l=null===(t=null===(n=(0,_.Jw)(null==a?void 0:a.children,"opt_joinParts"))||void 0===n?void 0:n.children)||void 0===t?void 0:t[0];l&&(E=function e(n){let t=(0,_.Jw)(n.children,"joinPart"),E=(0,_.Jw)(n.children,"joinParts"),a=(0,_.Jw)(t.children,"tableSourceItem"),r=M(a);if(E){let n=e(E);r.join=n}return r}(l));let o=M(i);return(o.join=E,r)?[o].concat(D(r)):[o]}function P(e){let n=(0,_.Jw)(e.children,"tableSources");return D(n)}function h(e){let n=(0,_.Jw)(e.children,"expression"),t=(0,_.Jw)(e.children,"uid");if(n){(0,_.Jw)(n.children,"expression");let E=(0,_.Jw)(n.children,"predicate"),a=(0,_.Jw)(n.children,"IS");if(E&&!a){let n=(0,_.Jw)(E.children,"expressionAtom");if(n&&1===E.children.length){let E=(0,_.Jw)(n.children,"fullColumnName");if(E)return{columnName:function(e){let n=(0,_.Jw)(e.children,"uid"),t=(0,_.Jw)(e.children,"fullId");if(t){let e=(0,_.Jw)(t.children,"uid"),n=(0,_.Jw)(t.children,"dottedId");return n?[e.getText(),n.getText().substring(1)]:e.getText()}let E=e.children[1],a=e.children[2];return[n.getText(),E.getText().substring(1),a.getText().substring(1)]}(E),expr:e.getText(),location:e.location,alias:null==t?void 0:t.getText()}}}return{expr:n.getText(),location:e.location,alias:null==t?void 0:t.getText()}}return{star:!0,expr:e.getText(),location:e.location}}function f(e){var n,t;let E=(0,_.Jw)(e.children,"selectElement"),a=(0,_.Jw)(e.children,"STAR"),r=null===(t=null===(n=(0,_.Jw)(e.children,"opt_selectElementPart"))||void 0===n?void 0:n.children)||void 0===t?void 0:t[0],i=[];if(E){let e=h(E);i.push(e)}else a&&i.push({expr:null==a?void 0:a.getText(),star:!0,location:null==a?void 0:a.location});if(r){let e=function e(n){let t=(0,_.Jw)(n.children,"selectElement"),E=(0,_.Jw)(n.children,"selectElementPart"),a=h(t);return E?[a].concat(e(E)):[a]}(r);i=i.concat(e)}return i}function v(e){let n=(0,_.Jw)(e.children,"orderByExprList"),t=function e(n){let t=(0,_.Jw)(n.children,"orderByExprList"),E=(0,_.Jw)(n.children,"orderByExpression");return t?[E].concat(e(t)):[E]}(n);return{location:e.location,sortExprs:t.map(e=>e.location)}}function g(e){var n,t,E,a;let r=null===(t=null===(n=(0,_.Jw)(e.children,"opt_fromClause"))||void 0===n?void 0:n.children)||void 0===t?void 0:t[0],i=null===(a=null===(E=(0,_.Jw)(e.children,"opt_orderByClause"))||void 0===E?void 0:E.children)||void 0===a?void 0:a[0];return new p.A(e.location,f((0,_.Jw)(e.children,"selectElements")),r?P(r):[],[],null,void 0,i?v(i):null)}function G(e){let n=(0,_.Jw)(e.children,"querySpecification"),t=(0,_.Jw)(e.children,"queryExpression"),E=t?G(t):F(n);return E.location=e.location,E}function y(e){let n=(0,_.Jw)(e.children,"querySpecificationNointo"),t=(0,_.Jw)(e.children,"queryExpressionNointo"),E=t?y(t):g(n);return E.location=e.location,E}function F(e){var n,t,E,a;let r=(0,_.Jw)(e.children,"querySpecificationNointo"),i=null===(t=null===(n=(0,_.Jw)(e.children,"opt_fromClause"))||void 0===n?void 0:n.children)||void 0===t?void 0:t[0],l=null===(a=null===(E=(0,_.Jw)(e.children,"opt_orderByClause"))||void 0===E?void 0:E.children)||void 0===a?void 0:a[0];return r?g(r):new p.A(e.location,f((0,_.Jw)(e.children,"selectElements")),i?P(i):[],[],null,void 0,l?v(l):null)}function w(e){return e.getText()}function b(e){var n,t;let E=(0,_.Jw)(e.children,"querySpecification"),a=(0,_.Jw)(e.children,"queryExpression"),r=(0,_.Jw)(e.children,"queryExpressionNointo"),i=(0,_.Jw)(e.children,"querySpecificationNointo"),l=(0,_.Jw)(e.children,"unionStatements"),o=(0,_.Jw)(e.children,"unionParenthesises"),s=null===(t=null===(n=(0,_.Jw)(e.children,"opt_orderByClause"))||void 0===n?void 0:n.children)||void 0===t?void 0:t[0];if(o||i){if(l){let n=g(i);n.location=e.location,s&&(n.orderBy=v(s));let{unionType:t,query:r}=function e(n){let t=(0,_.Jw)(n.children,"unionStatement"),E=(0,_.Jw)(n.children,"unionStatements"),a=w((0,_.Jw)(t.children,"unionType")),r=(0,_.Jw)(t.children,"querySpecificationNointo"),i=(0,_.Jw)(t.children,"queryExpressionNointo"),l=r?g(r):y(i);if(E){let{unionType:t,query:a}=e(E);l.unionType=t,l.union=a,l.location=n.location}return{unionType:a,query:l}}(l);n.unionType=t,n.union=r;let o=(0,_.Jw)(e.children,"unionType");if(o){let e=(0,_.jZ)(r);e.unionType=w(o),E?e.union=F(E):a&&(e.union=G(a))}return r}{let n=y(r),{union:t,unionType:E}=function e(n){let t=(0,_.Jw)(n.children,"unionParenthesis"),E=(0,_.Jw)(n.children,"unionParenthesises"),a=w((0,_.Jw)(t.children,"unionType")),r=(0,_.Jw)(t.children,"queryExpressionNointo"),i=y(r);if(E){let{union:t,unionType:a}=e(E);i.unionType=a,i.union=t,i.location=n.location}return{unionType:a,union:i}}(o);n.unionType=E,n.union=t,n.location=e.location,s&&(n.orderBy=v(s));let i=(0,_.Jw)(e.children,"unionType");if(i){let e=(0,_.jZ)(n);e.unionType=w(i),e.union=G(a)}return n}}{let n;switch(e.children[0].type){case"querySpecification":return(n=F(E)).location=e.location,n;case"queryExpression":return(n=G(a)).location=e.location,n;case"queryExpressionNointo":return(n=y(r)).location=e.location,n;default:return null}}}let H=new Set(N),x=O.InputStream,B=new Map,Y=[],k=0;function J(e,n){var t,E;console.log("MaxSize:200",`currentTokenSize: ${k}`,`keys: ${Y.length}`);let a=`${e}$$@@##${n}`,r=B.get(a);if(r)return null==r?void 0:r.data;let i=new u.SQLDocument({text:e,type:u.SQLType.MySQL,delimiter:n}),l=(null===(t=null==i?void 0:i.statements)||void 0===t?void 0:t.reduce((e,n)=>{var t;return((null===(t=null==n?void 0:n.tokens)||void 0===t?void 0:t.length)||0)+e},0))||0;if(B.set(a,{data:i,size:l}),k+=l,Y.push(a),Y.length>200){let e=Y.length;Y=Y.slice(e-100,e);let n=Y.slice(0,e-100);n.forEach(e=>{var n;k-=(null===(n=B.get(e))||void 0===n?void 0:n.size)||0,B.delete(e)})}else if(k>5e5){let e=0;for(;e<Y.length-1&&!(k<5e5);e++){let n=Y[e],t=(null===(E=B.get(n))||void 0===E?void 0:E.size)||0;k-=t,B.delete(n)}Y=Y.slice(e)}return i}class W extends x{LA(e){let n=super.LA(e);switch(n){case 0:case O.Token.EOF:return n;default:return String.fromCharCode(n).toUpperCase().charCodeAt(0)}}}var V={getTokens(e){var n;let t=new W(e),E=new L.Z(t),a=new O.CommonTokenStream(E);return a.fill(),null===(n=null==a?void 0:a.tokens)||void 0===n?void 0:n.map(e=>({type:e.type,channel:e.channel,start:e.start,stop:e.stop,text:e.text}))},getOffsetLeftTokens(e,n,t){var E,a,r,i;let l=new u.SQLDocument({text:e,type:u.SQLType.MySQL,delimiter:n}),o=l.statements.find(e=>e.start<=t&&e.stop>=t);if(!o){let e=null===(E=null==l?void 0:l.statements)||void 0===E?void 0:E.length;return e?(o=null===(a=null==l?void 0:l.statements)||void 0===a?void 0:a[e-1],this.getTokens(o.text)):[]}let s=null===(i=null===(r=o.tokens)||void 0===r?void 0:r.reverse)||void 0===i?void 0:i.call(r),T=s.findIndex(e=>e.stop<t);return s.slice(T,s.length).reverse().map(e=>({type:e.type,channel:e.channel,start:e.start,stop:e.stop,text:e.text}))},getAutoCompletion(e,n,t){let E={NULLX:"NULL",STAR:"*"},a=J(e,n),r=a.statements.find(e=>e.start<=t-1&&e.stop>=t-1);return r?function(e,t){var a,r,i,l;let o,s,T,S,R;let I=[],N=(null===(a=e.text)||void 0===a?void 0:a[t-1])===".";if(N){let E=e.text.substring(0,t-1)+" "+e.text.substring(t);e=null===(r=J(E,n).statements)||void 0===r?void 0:r[0]}let c=e.parse(t,function(e,n,t,E){o=e,s=n,T=t,S=E});if(N){let e="";if(!S)return I=[],[];let n=[],E=S.reverse();for(let t=1;t<E.length;t+=2)if(n.push(E[t]),"."!=E[t+1]){e=n.reverse().join(".");break}if(c.error)return I.push({type:"objectAccess",objectName:e}),I;let a=U(c.result),r=(0,C.D)(a,t-1);if(!r)return I=[];let i=null==r?void 0:r.getContext(t-1);if(i===p.N.FromList)return I=[{type:"allTables",schema:e}];{let n,t,E;for(let a of r.fromTables){let r;if(a.alias?r=a.alias:a.tableName&&(r=[a.schemaName,a.tableName].filter(Boolean).join(".")),r===e){E=!!a.query,n=a.tableName,t=a.schemaName;break}}return n&&!E?I=[{type:"tableColumns",tableName:n,schemaName:t}]:(I.push({type:"objectAccess",objectName:e}),I)}}console.log(o),(o=null==o?void 0:o.filter(e=>H.has(e)))&&(I=o.map(e=>E[e]||e));let m=U(c.result);R=(0,C.D)(m,t);let A=null==R?void 0:R.getContext(t);return A===p.N.SelectList||A===p.N.WhereAndGruopBy?(null===(i=null==R?void 0:R.fromTables)||void 0===i||i.forEach(e=>{e.alias?(null==I||I.push({type:"fromTable",tableName:e.alias}),!e.query&&e.tableName&&(null==I||I.push({type:"tableColumns",tableName:e.tableName,schemaName:e.schemaName}))):e.tableName&&(null==I||I.push({type:"fromTable",tableName:e.tableName,schemaName:e.schemaName}),null==I||I.push({type:"tableColumns",tableName:e.tableName,schemaName:e.schemaName}))}),null==I||I.push({type:"allFunction"})):A===p.N.FromList&&(I.push({type:"allTables"}),I.push({type:"allSchemas"}),null===(l=null==R?void 0:R.withTables)||void 0===l||l.forEach(e=>{I.push({type:"withTable",tableName:e.tableName})})),console.log(s,T),console.log(c),console.log(m),Array.from(new Set(I))}(r,t-r.start):null},getOffsetType(e,n,t){var E;let a;if(!e)return null;let r=J(e,n),i=r.statements.find(e=>e.start<=t-1&&e.stop>=t-1);if(!i)return null;t-=i.start;let l=i.parse(t,()=>{});if(!l)return null;let o=U(l.result);if(o.forEach((e,n)=>{let E=e.location;if(E&&E.range[0]<=t&&E.range[1]>=t&&(!a||a.location&&a.location.range[0]<E.range[0])){a=e;return}}),!a)return null;let s=a.fromTables.find(e=>{let{location:n}=e;return n.range[0]<=t&&n.range[1]>=t});if(s)return s.query?null:{type:"table",name:s.tableName||"",schema:s.schemaName};let T=a.selectColumns.find(e=>{let{location:n}=e;return n.range[0]<=t&&n.range[1]>=t});if(T){if(!T.columnName||!(T.columnName instanceof Array)||(null===(E=T.columnName)||void 0===E?void 0:E.length)<2)return null;let e=T.columnName[0],n=a.fromTables.find(n=>n.alias===e||n.tableName===e);return n?{type:"table",name:n.tableName||"",schema:n.schemaName}:null}return null}},X=class{constructor(e){this.plugin=null,this.plugin=e}provideHover(e,n,t){var E,a;if(null===(a=null===(E=this.plugin)||void 0===E?void 0:E.modelOptionsMap.get(e.id))||void 0===a?void 0:a.getTableDDL)return new Promise((t,E)=>{var a,r,i,l;return a=this,r=void 0,i=void 0,l=function*(){var E,a,r,i,l;let o=e.getWordAtPosition(n);if(!o)return t(null);let s=(null===(a=null===(E=this.plugin)||void 0===E?void 0:E.modelOptionsMap.get(e.id))||void 0===a?void 0:a.delimiter)||";",T=e.getOffsetAt(n),S=yield V.getOffsetType(e.getValue(),s,T);if(!S){t(null);return}let{type:R,name:I,schema:N}=S;if(!I){t(null);return}let c=yield null===(l=null===(i=null===(r=this.plugin)||void 0===r?void 0:r.modelOptionsMap.get(e.id))||void 0===i?void 0:i.getTableDDL)||void 0===l?void 0:l.call(i,I,N);if(!c){t(null);return}t({contents:[{value:"```sql\n "+c+" \n```"}]})},new(i||(i=Promise))(function(e,n){function t(e){try{o(l.next(e))}catch(e){n(e)}}function E(e){try{o(l.throw(e))}catch(e){n(e)}}function o(n){var a;n.done?e(n.value):((a=n.value)instanceof i?a:new i(function(e){e(a)})).then(t,E)}o((l=l.apply(a,r||[])).next())})})}};function Q(e){E.Mj.register({id:a.$.MySQL}),E.Mj.setMonarchTokensProvider(a.$.MySQL,m),E.Mj.setLanguageConfiguration(a.$.MySQL,c),E.Mj.registerCompletionItemProvider(a.$.MySQL,new I(e)),E.Mj.registerDocumentFormattingEditProvider(a.$.MySQL,new A.m(e,a.$.MySQL)),E.Mj.registerDocumentRangeFormattingEditProvider(a.$.MySQL,new A.X(e,a.$.MySQL)),E.Mj.registerInlineCompletionsProvider(a.$.MySQL,new d.Z(e)),E.Mj.registerHoverProvider(a.$.MySQL,new X(e))}}}]);